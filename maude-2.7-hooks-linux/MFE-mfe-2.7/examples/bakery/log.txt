MTT -> AProVE: 
( VAR A B C Is M' M N' N NB' NB Ps Ws X X@@@ )   ( THEORY     ( AC @underscore@@underscore@-@osb@NatBag@csb@-@osb@NatBag@csb@ )     ( AC @underscore@@underscore@-@osb@ProcSet@csb@-@osb@ProcSet@csb@ )     ( AC @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ )     ( AC @underscore@or@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ )     ( AC @underscore@xor@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ )     ( C equ-@osb@NatBag@csb@-@osb@NatBag@csb@ )   )     ( RULES     <=-@osb@NatBag@csb@-@osb@NatBag@csb@ ( 0 ,   N ) -> true     <=-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   N ) -> true     <=-@osb@NatBag@csb@-@osb@NatBag@csb@ ( s@underscore@-@osb@NatBag@csb@ ( N ) ,   0 ) -> false     <=-@osb@NatBag@csb@-@osb@NatBag@csb@ ( s@underscore@-@osb@NatBag@csb@ ( N ) ,   s@underscore@-@osb@NatBag@csb@ ( M ) ) -> <=-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   M )     @underscore@@underscore@-@osb@NatBag@csb@-@osb@NatBag@csb@ ( mtbag ,   X ) -> X     @underscore@@underscore@-@osb@ProcSet@csb@-@osb@ProcSet@csb@ ( none ,   X ) -> X     @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   A ) -> A     @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   @underscore@xor@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( B ,   C ) ) -> @underscore@xor@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   B ) ,   @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   C ) )     @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( false ,   A ) -> false     @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( true ,   A ) -> A     @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   A ,   X@@@ ) -> @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   X@@@ )     @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   X@@@ ,   @underscore@xor@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( B ,   C ) ) -> @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( X@@@ ,   @underscore@xor@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   B ) ,   @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   C ) ) )     @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@-@osb@Bool@csb@ ( false ,   A ,   X@@@ ) -> @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( false ,   X@@@ )     @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@-@osb@Bool@csb@ ( true ,   A ,   X@@@ ) -> @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   X@@@ )     @underscore@implies@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   B ) -> not@underscore@-@osb@Bool@csb@ ( @underscore@xor@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   B ) ) )     @underscore@or@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   B ) -> @underscore@xor@underscore@-@osb@Bool@csb@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   B ,   @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   B ) )     @underscore@or@underscore@-@osb@Bool@csb@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   B ,   X@@@ ) -> @underscore@or@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( X@@@ ,   @underscore@xor@underscore@-@osb@Bool@csb@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   B ,   @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   B ) ) )     @underscore@xor@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   A ) -> false     @underscore@xor@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( false ,   A ) -> A     @underscore@xor@underscore@-@osb@Bool@csb@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   A ,   X@@@ ) -> @underscore@xor@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( false ,   X@@@ )     @underscore@xor@underscore@-@osb@Bool@csb@-@osb@Bool@csb@-@osb@Bool@csb@ ( false ,   A ,   X@@@ ) -> @underscore@xor@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,   X@@@ )     U11 ( tt ) -> set?-@osb@NatBag@csb@ ( mtbag )     U21 ( tt ,   NB ) -> set?-@osb@NatBag@csb@ ( NB )     bounded-tickets-@osb@State@csb@ ( @underscore@:@underscore@@osb@@underscore@@csb@-@osb@NatBag@csb@-@osb@NatBag@csb@-@osb@ProcSet@csb@ ( N ,   M ,   Ps ) ) -> sub-bag-@osb@NatBag@csb@-@osb@NatBag@csb@ ( tickets-@osb@ProcSet@csb@ ( Ps ) ,   tickets-below-@osb@NatBag@csb@ ( N ) )     equ-@osb@NatBag@csb@-@osb@NatBag@csb@ ( 0 ,   s@underscore@-@osb@NatBag@csb@ ( N ) ) -> false     equ-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   N ) -> true     equ-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   s@underscore@-@osb@NatBag@csb@ ( N ) ) -> false     equ-@osb@NatBag@csb@-@osb@NatBag@csb@ ( s@underscore@-@osb@NatBag@csb@ ( N ) ,   s@underscore@-@osb@NatBag@csb@ ( N' ) ) -> equ-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   N' )     equal-@osb@Bool@csb@-@osb@Bool@csb@ ( X ,   X ) -> tt     good-state-@osb@State@csb@ ( @underscore@:@underscore@@osb@@underscore@@csb@-@osb@NatBag@csb@-@osb@NatBag@csb@-@osb@ProcSet@csb@ ( N ,   M ,   Ws ) ) -> true     good-state-@osb@State@csb@ ( @underscore@:@underscore@@osb@@underscore@@csb@-@osb@NatBag@csb@-@osb@NatBag@csb@-@osb@ProcSet@csb@ ( N ,   M ,   @underscore@@underscore@-@osb@ProcSet@csb@-@osb@ProcSet@csb@ ( Ws ,   crit-@osb@NatBag@csb@ ( M ) ) ) ) -> true     good-state-@osb@State@csb@ ( @underscore@:@underscore@@osb@@underscore@@csb@-@osb@NatBag@csb@-@osb@NatBag@csb@-@osb@ProcSet@csb@ ( N ,   M ,   @underscore@@underscore@-@osb@ProcSet@csb@-@osb@ProcSet@csb@ ( crit-@osb@NatBag@csb@ ( N' ) ,   crit-@osb@NatBag@csb@ ( M' ) ) ) ) -> false     good-state-@osb@State@csb@ ( @underscore@:@underscore@@osb@@underscore@@csb@-@osb@NatBag@csb@-@osb@NatBag@csb@-@osb@ProcSet@csb@ ( N ,   M ,   @underscore@@underscore@-@osb@ProcSet@csb@-@osb@ProcSet@csb@-@osb@ProcSet@csb@ ( Ps ,   crit-@osb@NatBag@csb@ ( N' ) ,   crit-@osb@NatBag@csb@ ( M' ) ) ) ) -> false     good-state-@osb@State@csb@ ( @underscore@:@underscore@@osb@@underscore@@csb@-@osb@NatBag@csb@-@osb@NatBag@csb@-@osb@ProcSet@csb@ ( N ,   M ,   crit-@osb@NatBag@csb@ ( M ) ) ) -> true     in?-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   M ) -> @underscore@or@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( equ-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   M ) ,   in?-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   mtbag ) )     in?-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   mtbag ) -> false     in?-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   @underscore@@underscore@-@osb@NatBag@csb@-@osb@NatBag@csb@ ( M ,   NB ) ) -> @underscore@or@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( equ-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   M ) ,   in?-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   NB ) )     init-@osb@State@csb@ ( @underscore@:@underscore@@osb@@underscore@@csb@-@osb@NatBag@csb@-@osb@NatBag@csb@-@osb@ProcSet@csb@ ( 0 ,   0 ,   Is ) ) -> true     mutex-@osb@State@csb@ ( @underscore@:@underscore@@osb@@underscore@@csb@-@osb@NatBag@csb@-@osb@NatBag@csb@-@osb@ProcSet@csb@ ( N ,   M ,   Ws ) ) -> true     mutex-@osb@State@csb@ ( @underscore@:@underscore@@osb@@underscore@@csb@-@osb@NatBag@csb@-@osb@NatBag@csb@-@osb@ProcSet@csb@ ( N ,   M ,   @underscore@@underscore@-@osb@ProcSet@csb@-@osb@ProcSet@csb@ ( Ws ,   crit-@osb@NatBag@csb@ ( M' ) ) ) ) -> true     mutex-@osb@State@csb@ ( @underscore@:@underscore@@osb@@underscore@@csb@-@osb@NatBag@csb@-@osb@NatBag@csb@-@osb@ProcSet@csb@ ( N ,   M ,   @underscore@@underscore@-@osb@ProcSet@csb@-@osb@ProcSet@csb@ ( crit-@osb@NatBag@csb@ ( N' ) ,   crit-@osb@NatBag@csb@ ( M' ) ) ) ) -> false     mutex-@osb@State@csb@ ( @underscore@:@underscore@@osb@@underscore@@csb@-@osb@NatBag@csb@-@osb@NatBag@csb@-@osb@ProcSet@csb@ ( N ,   M ,   @underscore@@underscore@-@osb@ProcSet@csb@-@osb@ProcSet@csb@-@osb@ProcSet@csb@ ( Ps ,   crit-@osb@NatBag@csb@ ( N' ) ,   crit-@osb@NatBag@csb@ ( M' ) ) ) ) -> false     mutex-@osb@State@csb@ ( @underscore@:@underscore@@osb@@underscore@@csb@-@osb@NatBag@csb@-@osb@NatBag@csb@-@osb@ProcSet@csb@ ( N ,   M ,   crit-@osb@NatBag@csb@ ( M' ) ) ) -> true     not@underscore@-@osb@Bool@csb@ ( A ) -> @underscore@xor@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( true ,   A )     set?-@osb@NatBag@csb@ ( N ) -> U11 ( equal-@osb@Bool@csb@-@osb@Bool@csb@ ( in?-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   mtbag ) ,   false ) )     set?-@osb@NatBag@csb@ ( mtbag ) -> true     set?-@osb@NatBag@csb@ ( @underscore@@underscore@-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   N ) ) -> false     set?-@osb@NatBag@csb@ ( @underscore@@underscore@-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   NB ) ) -> U21 ( equal-@osb@Bool@csb@-@osb@Bool@csb@ ( in?-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   NB ) ,   false ) ,   NB )     set?-@osb@NatBag@csb@ ( @underscore@@underscore@-@osb@NatBag@csb@-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   N ,   NB ) ) -> false     sub-bag-@osb@NatBag@csb@-@osb@NatBag@csb@ ( NB ,   NB ) -> true     sub-bag-@osb@NatBag@csb@-@osb@NatBag@csb@ ( NB ,   @underscore@@underscore@-@osb@NatBag@csb@-@osb@NatBag@csb@ ( NB ,   NB' ) ) -> true     sub-bag-@osb@NatBag@csb@-@osb@NatBag@csb@ ( mtbag ,   NB' ) -> true     tickets-@osb@ProcSet@csb@ ( Is ) -> mtbag     tickets-@osb@ProcSet@csb@ ( idle ) -> tickets-@osb@ProcSet@csb@ ( none )     tickets-@osb@ProcSet@csb@ ( @underscore@@underscore@-@osb@ProcSet@csb@-@osb@ProcSet@csb@ ( Ps ,   crit-@osb@NatBag@csb@ ( N ) ) ) -> @underscore@@underscore@-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   tickets-@osb@ProcSet@csb@ ( Ps ) )     tickets-@osb@ProcSet@csb@ ( @underscore@@underscore@-@osb@ProcSet@csb@-@osb@ProcSet@csb@ ( Ps ,   wait-@osb@NatBag@csb@ ( N ) ) ) -> @underscore@@underscore@-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   tickets-@osb@ProcSet@csb@ ( Ps ) )     tickets-@osb@ProcSet@csb@ ( @underscore@@underscore@-@osb@ProcSet@csb@-@osb@ProcSet@csb@ ( idle ,   Ps ) ) -> tickets-@osb@ProcSet@csb@ ( Ps )     tickets-@osb@ProcSet@csb@ ( crit-@osb@NatBag@csb@ ( N ) ) -> @underscore@@underscore@-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   tickets-@osb@ProcSet@csb@ ( none ) )     tickets-@osb@ProcSet@csb@ ( wait-@osb@NatBag@csb@ ( N ) ) -> @underscore@@underscore@-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   tickets-@osb@ProcSet@csb@ ( none ) )     tickets-below-@osb@NatBag@csb@ ( 0 ) -> mtbag     tickets-below-@osb@NatBag@csb@ ( s@underscore@-@osb@NatBag@csb@ ( N ) ) -> @underscore@@underscore@-@osb@NatBag@csb@-@osb@NatBag@csb@ ( N ,   tickets-below-@osb@NatBag@csb@ ( N ) )     unique-tickets-@osb@State@csb@ ( @underscore@:@underscore@@osb@@underscore@@csb@-@osb@NatBag@csb@-@osb@NatBag@csb@-@osb@ProcSet@csb@ ( N ,   M ,   Ps ) ) -> set?-@osb@NatBag@csb@ ( tickets-@osb@ProcSet@csb@ ( Ps ) )   )   

AProVE -> MTT: 
MAYBE
Term Rewriting System R:

   [N, M, X, A, B, C, X@@@, NB, Ps, N', Ws, M', Is, NB']
   AC [_and_-`[Bool`]-`[Bool`], __-`[ProcSet`]-`[ProcSet`], _or_-`[Bool`]-`[Bool`], __-`[NatBag`]-`[NatBag`], _xor_-`[Bool`]-`[Bool`]]
   C [equ-`[NatBag`]-`[NatBag`]]
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   U11(tt) -> set?-`[NatBag`](mtbag)
   U21(tt, NB) -> set?-`[NatBag`](NB)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))

Termination of R to be shown.





   R     ->Dependency Pair Analysis



R contains the following Dependency Pairs: 


   @UNDERSCORE@XOR@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   @UNDERSCORE@XOR@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, A), ext) -> _xor_-`[Bool`]-`[Bool`](false, ext)
   IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, M) -> equ-`[NatBag`]-`[NatBag`](N, M)
   IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, M) -> IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, mtbag)
   IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, __-`[NatBag`]-`[NatBag`](M, NB)) -> equ-`[NatBag`]-`[NatBag`](N, M)
   IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, __-`[NatBag`]-`[NatBag`](M, NB)) -> IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, NB)
   _or_-`[Bool`]-`[Bool`](A, B) -> @UNDERSCORE@XOR@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(A, B, _and_-`[Bool`]-`[Bool`](A, B))
   _or_-`[Bool`]-`[Bool`](A, B) -> _and_-`[Bool`]-`[Bool`](A, B)
   _or_-`[Bool`]-`[Bool`](_or_-`[Bool`]-`[Bool`](A, B), ext) -> _or_-`[Bool`]-`[Bool`](_xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)), ext)
   _or_-`[Bool`]-`[Bool`](_or_-`[Bool`]-`[Bool`](A, B), ext) -> @UNDERSCORE@XOR@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(A, B, _and_-`[Bool`]-`[Bool`](A, B))
   _or_-`[Bool`]-`[Bool`](_or_-`[Bool`]-`[Bool`](A, B), ext) -> _and_-`[Bool`]-`[Bool`](A, B)
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   SET?-@OSB@NATBAG@CSB@(__-`[NatBag`]-`[NatBag`](N, NB)) -> U21'(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   SET?-@OSB@NATBAG@CSB@(__-`[NatBag`]-`[NatBag`](N, NB)) -> EQUAL-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(in?-`[NatBag`]-`[NatBag`](N, NB), false)
   SET?-@OSB@NATBAG@CSB@(__-`[NatBag`]-`[NatBag`](N, NB)) -> IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, NB)
   SET?-@OSB@NATBAG@CSB@(N) -> U11'(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   SET?-@OSB@NATBAG@CSB@(N) -> EQUAL-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(in?-`[NatBag`]-`[NatBag`](N, mtbag), false)
   SET?-@OSB@NATBAG@CSB@(N) -> IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, mtbag)
   TICKETS-@OSB@PROCSET@CSB@(idle) -> TICKETS-@OSB@PROCSET@CSB@(none)
   TICKETS-@OSB@PROCSET@CSB@(__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> TICKETS-@OSB@PROCSET@CSB@(Ps)
   TICKETS-@OSB@PROCSET@CSB@(__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   TICKETS-@OSB@PROCSET@CSB@(__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> TICKETS-@OSB@PROCSET@CSB@(Ps)
   TICKETS-@OSB@PROCSET@CSB@(__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   TICKETS-@OSB@PROCSET@CSB@(__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> TICKETS-@OSB@PROCSET@CSB@(Ps)
   TICKETS-@OSB@PROCSET@CSB@(wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   TICKETS-@OSB@PROCSET@CSB@(wait-`[NatBag`](N)) -> TICKETS-@OSB@PROCSET@CSB@(none)
   TICKETS-@OSB@PROCSET@CSB@(crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   TICKETS-@OSB@PROCSET@CSB@(crit-`[NatBag`](N)) -> TICKETS-@OSB@PROCSET@CSB@(none)
   @UNDERSCORE@AND@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   @UNDERSCORE@AND@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   @UNDERSCORE@AND@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   @UNDERSCORE@AND@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   @UNDERSCORE@AND@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   @UNDERSCORE@AND@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](A, B)
   @UNDERSCORE@AND@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](A, C)
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](A, B)
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](A, C)
   _and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](false, A), ext) -> _and_-`[Bool`]-`[Bool`](false, ext)
   _and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)), ext) -> _and_-`[Bool`]-`[Bool`](_xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)), ext)
   _and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)), ext) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)), ext) -> _and_-`[Bool`]-`[Bool`](A, B)
   _and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)), ext) -> _and_-`[Bool`]-`[Bool`](A, C)
   _and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, A), ext) -> _and_-`[Bool`]-`[Bool`](A, ext)
   UNIQUE-TICKETS-@OSB@STATE@CSB@(_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> SET?-@OSB@NATBAG@CSB@(tickets-`[ProcSet`](Ps))
   UNIQUE-TICKETS-@OSB@STATE@CSB@(_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> TICKETS-@OSB@PROCSET@CSB@(Ps)
   U21'(tt, NB) -> SET?-@OSB@NATBAG@CSB@(NB)
   TICKETS-BELOW-@OSB@NATBAG@CSB@(s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   TICKETS-BELOW-@OSB@NATBAG@CSB@(s_-`[NatBag`](N)) -> TICKETS-BELOW-@OSB@NATBAG@CSB@(N)
   U11'(tt) -> SET?-@OSB@NATBAG@CSB@(mtbag)
   <=-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, M)
   @UNDERSCORE@IMPLIES@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(A, B) -> NOT@UNDERSCORE@-@OSB@BOOL@CSB@(_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   @UNDERSCORE@IMPLIES@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(A, B) -> _xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B))
   @UNDERSCORE@IMPLIES@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(A, B) -> _and_-`[Bool`]-`[Bool`](A, B)
   NOT@UNDERSCORE@-@OSB@BOOL@CSB@(A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   BOUNDED-TICKETS-@OSB@STATE@CSB@(_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> SUB-BAG-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   BOUNDED-TICKETS-@OSB@STATE@CSB@(_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> TICKETS-@OSB@PROCSET@CSB@(Ps)
   BOUNDED-TICKETS-@OSB@STATE@CSB@(_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> TICKETS-BELOW-@OSB@NATBAG@CSB@(N)
   @UNDERSCORE@OR@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))
   @UNDERSCORE@OR@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(A, B, X@@@) -> @UNDERSCORE@XOR@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(A, B, _and_-`[Bool`]-`[Bool`](A, B))
   @UNDERSCORE@OR@UNDERSCORE@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@-@OSB@BOOL@CSB@(A, B, X@@@) -> _and_-`[Bool`]-`[Bool`](A, B)

Furthermore, R contains 11 SCCs.



   R     ->DPs

       ->DP Problem 1
         ->Polynomial Ordering
       ->DP Problem 2
         ->Polo
       ->DP Problem 3
         ->AFS
       ->DP Problem 4
         ->Polo
       ->DP Problem 5
         ->Remaining
       ->DP Problem 6
         ->Polo
       ->DP Problem 7
         ->Remaining
       ->DP Problem 8
         ->Remaining
       ->DP Problem 9
         ->Polo
       ->DP Problem 10
         ->Polo
       ->DP Problem 11
         ->Polo


Dependency Pair:
_xor_-`[Bool`]-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, A), ext) -> _xor_-`[Bool`]-`[Bool`](false, ext)
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))




The following dependency pair can be strictly oriented:


   _xor_-`[Bool`]-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, A), ext) -> _xor_-`[Bool`]-`[Bool`](false, ext)


Additionally, the following usable rules w.r.t. the implicit AFS can be oriented: 

   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A

Oriented Equations: 

   _xor_-`[Bool`]-`[Bool`](x, _xor_-`[Bool`]-`[Bool`](y, z)) == _xor_-`[Bool`]-`[Bool`](_xor_-`[Bool`]-`[Bool`](x, y), z)
   _xor_-`[Bool`]-`[Bool`](x, y) == _xor_-`[Bool`]-`[Bool`](y, x)


Used ordering: Polynomial ordering with Polynomial interpretation:
POL(false) = 0
POL(_xor_-`[Bool`]-`[Bool`](x_1, x_2)) = 1 + x_1 + x_2

 resulting in one new DP problem.




   R     ->DPs

       ->DP Problem 1
         ->Polo

           ->DP Problem 12
             ->Dependency Graph
       ->DP Problem 2
         ->Polo
       ->DP Problem 3
         ->AFS
       ->DP Problem 4
         ->Polo
       ->DP Problem 5
         ->Remaining
       ->DP Problem 6
         ->Polo
       ->DP Problem 7
         ->Remaining
       ->DP Problem 8
         ->Remaining
       ->DP Problem 9
         ->Polo
       ->DP Problem 10
         ->Polo
       ->DP Problem 11
         ->Polo


Dependency Pair:

Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))




Using the Dependency Graph resulted in no new DP problems.


   R     ->DPs

       ->DP Problem 1
         ->Polo
       ->DP Problem 2
         ->Polynomial Ordering
       ->DP Problem 3
         ->AFS
       ->DP Problem 4
         ->Polo
       ->DP Problem 5
         ->Remaining
       ->DP Problem 6
         ->Polo
       ->DP Problem 7
         ->Remaining
       ->DP Problem 8
         ->Remaining
       ->DP Problem 9
         ->Polo
       ->DP Problem 10
         ->Polo
       ->DP Problem 11
         ->Polo


Dependency Pairs:
_and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, A), ext) -> _and_-`[Bool`]-`[Bool`](A, ext)
_and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)), ext) -> _and_-`[Bool`]-`[Bool`](A, C)
_and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)), ext) -> _and_-`[Bool`]-`[Bool`](A, B)
_and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)), ext) -> _and_-`[Bool`]-`[Bool`](_xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)), ext)
_and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](false, A), ext) -> _and_-`[Bool`]-`[Bool`](false, ext)
_and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](A, C)
_and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](A, B)
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))




The following dependency pairs can be strictly oriented:


   _and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)), ext) -> _and_-`[Bool`]-`[Bool`](A, C)
   _and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)), ext) -> _and_-`[Bool`]-`[Bool`](A, B)
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](A, C)
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](A, B)


Additionally, the following usable rules w.r.t. the implicit AFS can be oriented: 

   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A

Oriented Equations: 

   _and_-`[Bool`]-`[Bool`](x, _and_-`[Bool`]-`[Bool`](y, z)) == _and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](x, y), z)
   _and_-`[Bool`]-`[Bool`](x, y) == _and_-`[Bool`]-`[Bool`](y, x)
   _xor_-`[Bool`]-`[Bool`](x, _xor_-`[Bool`]-`[Bool`](y, z)) == _xor_-`[Bool`]-`[Bool`](_xor_-`[Bool`]-`[Bool`](x, y), z)
   _xor_-`[Bool`]-`[Bool`](x, y) == _xor_-`[Bool`]-`[Bool`](y, x)


Used ordering: Polynomial ordering with Polynomial interpretation:
POL(_and_-`[Bool`]-`[Bool`](x_1, x_2)) = x_1 + x_1*x_2 + x_2
POL(false) = 0
POL(true) = 0
POL(_xor_-`[Bool`]-`[Bool`](x_1, x_2)) = 1 + x_1 + x_2

 resulting in one new DP problem.




   R     ->DPs

       ->DP Problem 1
         ->Polo
       ->DP Problem 2
         ->Polo

           ->DP Problem 13
             ->Argument Filtering and Ordering
       ->DP Problem 3
         ->AFS
       ->DP Problem 4
         ->Polo
       ->DP Problem 5
         ->Remaining
       ->DP Problem 6
         ->Polo
       ->DP Problem 7
         ->Remaining
       ->DP Problem 8
         ->Remaining
       ->DP Problem 9
         ->Polo
       ->DP Problem 10
         ->Polo
       ->DP Problem 11
         ->Polo


Dependency Pairs:
_and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, A), ext) -> _and_-`[Bool`]-`[Bool`](A, ext)
_and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)), ext) -> _and_-`[Bool`]-`[Bool`](_xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)), ext)
_and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](false, A), ext) -> _and_-`[Bool`]-`[Bool`](false, ext)
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))




The following dependency pairs can be strictly oriented:


   _and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, A), ext) -> _and_-`[Bool`]-`[Bool`](A, ext)
   _and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)), ext) -> _and_-`[Bool`]-`[Bool`](_xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)), ext)
   _and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](false, A), ext) -> _and_-`[Bool`]-`[Bool`](false, ext)


The following usable rules w.r.t. the AFS can be oriented: 

   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A

Oriented Equations: 

   _and_-`[Bool`]-`[Bool`](x, _and_-`[Bool`]-`[Bool`](y, z)) == _and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](x, y), z)
   _and_-`[Bool`]-`[Bool`](x, y) == _and_-`[Bool`]-`[Bool`](y, x)
   _xor_-`[Bool`]-`[Bool`](x, _xor_-`[Bool`]-`[Bool`](y, z)) == _xor_-`[Bool`]-`[Bool`](_xor_-`[Bool`]-`[Bool`](x, y), z)
   _xor_-`[Bool`]-`[Bool`](x, y) == _xor_-`[Bool`]-`[Bool`](y, x)


Used ordering: AC-Compatible Recursive Path Order with Status with Precedence:
_and_-`[Bool`]-`[Bool`] > _xor_-`[Bool`]-`[Bool`] > false


Status:
_and_-`[Bool`]-`[Bool`]: flat status
true: no status
false: no status
_xor_-`[Bool`]-`[Bool`]: flat status

 resulting in one new DP problem.

Used Argument Filtering System: ([_and_-`[Bool`]-`[Bool`](x_1, x_2) -> _and_-`[Bool`]-`[Bool`](x_1, x_2), _xor_-`[Bool`]-`[Bool`](x_1, x_2) -> _xor_-`[Bool`]-`[Bool`](x_1, x_2)])

   R     ->DPs

       ->DP Problem 1
         ->Polo
       ->DP Problem 2
         ->Polo
       ->DP Problem 3
         ->Argument Filtering and Ordering
       ->DP Problem 4
         ->Polo
       ->DP Problem 5
         ->Remaining
       ->DP Problem 6
         ->Polo
       ->DP Problem 7
         ->Remaining
       ->DP Problem 8
         ->Remaining
       ->DP Problem 9
         ->Polo
       ->DP Problem 10
         ->Polo
       ->DP Problem 11
         ->Polo


Dependency Pair:
_or_-`[Bool`]-`[Bool`](_or_-`[Bool`]-`[Bool`](A, B), ext) -> _or_-`[Bool`]-`[Bool`](_xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)), ext)
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))




The following dependency pair can be strictly oriented:


   _or_-`[Bool`]-`[Bool`](_or_-`[Bool`]-`[Bool`](A, B), ext) -> _or_-`[Bool`]-`[Bool`](_xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)), ext)


The following usable rules w.r.t. the AFS can be oriented: 

   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A

Oriented Equations: 

   _and_-`[Bool`]-`[Bool`](x, _and_-`[Bool`]-`[Bool`](y, z)) == _and_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](x, y), z)
   _and_-`[Bool`]-`[Bool`](x, y) == _and_-`[Bool`]-`[Bool`](y, x)
   _or_-`[Bool`]-`[Bool`](x, _or_-`[Bool`]-`[Bool`](y, z)) == _or_-`[Bool`]-`[Bool`](_or_-`[Bool`]-`[Bool`](x, y), z)
   _or_-`[Bool`]-`[Bool`](x, y) == _or_-`[Bool`]-`[Bool`](y, x)
   _xor_-`[Bool`]-`[Bool`](x, _xor_-`[Bool`]-`[Bool`](y, z)) == _xor_-`[Bool`]-`[Bool`](_xor_-`[Bool`]-`[Bool`](x, y), z)
   _xor_-`[Bool`]-`[Bool`](x, y) == _xor_-`[Bool`]-`[Bool`](y, x)


Used ordering: AC-Compatible Recursive Path Order with Status with Precedence:
_or_-`[Bool`]-`[Bool`] > _xor_-`[Bool`]-`[Bool`]-`[Bool`] > _xor_-`[Bool`]-`[Bool`] > false
_or_-`[Bool`]-`[Bool`] > _and_-`[Bool`]-`[Bool`] > _xor_-`[Bool`]-`[Bool`] > false


Status:
_xor_-`[Bool`]-`[Bool`]-`[Bool`]: no status
_and_-`[Bool`]-`[Bool`]: flat status
true: no status
false: no status
_or_-`[Bool`]-`[Bool`]: flat status
_xor_-`[Bool`]-`[Bool`]: flat status

 resulting in one new DP problem.

Used Argument Filtering System: ([_and_-`[Bool`]-`[Bool`](x_1, x_2) -> _and_-`[Bool`]-`[Bool`](x_1, x_2), _or_-`[Bool`]-`[Bool`](x_1, x_2) -> _or_-`[Bool`]-`[Bool`](x_1, x_2), _xor_-`[Bool`]-`[Bool`](x_1, x_2) -> _xor_-`[Bool`]-`[Bool`](x_1, x_2), _xor_-`[Bool`]-`[Bool`]-`[Bool`](x_1, x_2, x_3) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](x_1, x_2, x_3)])

   R     ->DPs

       ->DP Problem 1
         ->Polo
       ->DP Problem 2
         ->Polo
       ->DP Problem 3
         ->AFS
       ->DP Problem 4
         ->Polynomial Ordering
       ->DP Problem 5
         ->Remaining
       ->DP Problem 6
         ->Polo
       ->DP Problem 7
         ->Remaining
       ->DP Problem 8
         ->Remaining
       ->DP Problem 9
         ->Polo
       ->DP Problem 10
         ->Polo
       ->DP Problem 11
         ->Polo


Dependency Pair:
equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))




The following dependency pair can be strictly oriented:


   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')


There are no usable rules w.r.t. to the implicit AFS that need to be oriented.


Oriented Equation: 

   equ-`[NatBag`]-`[NatBag`](x, y) == equ-`[NatBag`]-`[NatBag`](y, x)


Used ordering: Polynomial ordering with Polynomial interpretation:
POL(s_-`[NatBag`](x_1)) = 1 + x_1
POL(equ-`[NatBag`]-`[NatBag`](x_1, x_2)) = 1 + x_1 + x_2

 resulting in one new DP problem.




   R     ->DPs

       ->DP Problem 1
         ->Polo
       ->DP Problem 2
         ->Polo
       ->DP Problem 3
         ->AFS
       ->DP Problem 4
         ->Polo
       ->DP Problem 5
         ->Remaining Obligation(s)
       ->DP Problem 6
         ->Polo
       ->DP Problem 7
         ->Remaining Obligation(s)
       ->DP Problem 8
         ->Remaining Obligation(s)
       ->DP Problem 9
         ->Polo
       ->DP Problem 10
         ->Polo
       ->DP Problem 11
         ->Polo




The following remains to be proven:
*Dependency Pair:

Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))



*Dependency Pair:
IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, M) -> IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, mtbag)
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))



*Dependency Pairs:
U11'(tt) -> SET?-@OSB@NATBAG@CSB@(mtbag)
SET?-@OSB@NATBAG@CSB@(N) -> U11'(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))



*Dependency Pairs:
U21'(tt, NB) -> SET?-@OSB@NATBAG@CSB@(NB)
SET?-@OSB@NATBAG@CSB@(__-`[NatBag`]-`[NatBag`](N, NB)) -> U21'(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))




   R     ->DPs

       ->DP Problem 1
         ->Polo
       ->DP Problem 2
         ->Polo
       ->DP Problem 3
         ->AFS
       ->DP Problem 4
         ->Polo
       ->DP Problem 5
         ->Remaining
       ->DP Problem 6
         ->Polynomial Ordering
       ->DP Problem 7
         ->Remaining
       ->DP Problem 8
         ->Remaining
       ->DP Problem 9
         ->Polo
       ->DP Problem 10
         ->Polo
       ->DP Problem 11
         ->Polo


Dependency Pair:
IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, __-`[NatBag`]-`[NatBag`](M, NB)) -> IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, NB)
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))




The following dependency pair can be strictly oriented:


   IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, __-`[NatBag`]-`[NatBag`](M, NB)) -> IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, NB)


There are no usable rules w.r.t. to the implicit AFS that need to be oriented.


Used ordering: Polynomial ordering with Polynomial interpretation:
POL(__-`[NatBag`]-`[NatBag`](x_1, x_2)) = 1 + x_2
POL(IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(x_1, x_2)) = 1 + x_1 + x_2

 resulting in one new DP problem.




   R     ->DPs

       ->DP Problem 1
         ->Polo
       ->DP Problem 2
         ->Polo
       ->DP Problem 3
         ->AFS
       ->DP Problem 4
         ->Polo
       ->DP Problem 5
         ->Remaining Obligation(s)
       ->DP Problem 6
         ->Polo
       ->DP Problem 7
         ->Remaining Obligation(s)
       ->DP Problem 8
         ->Remaining Obligation(s)
       ->DP Problem 9
         ->Polo
       ->DP Problem 10
         ->Polo
       ->DP Problem 11
         ->Polo




The following remains to be proven:
*Dependency Pair:

Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))



*Dependency Pair:
IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, M) -> IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, mtbag)
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))



*Dependency Pairs:
U11'(tt) -> SET?-@OSB@NATBAG@CSB@(mtbag)
SET?-@OSB@NATBAG@CSB@(N) -> U11'(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))



*Dependency Pairs:
U21'(tt, NB) -> SET?-@OSB@NATBAG@CSB@(NB)
SET?-@OSB@NATBAG@CSB@(__-`[NatBag`]-`[NatBag`](N, NB)) -> U21'(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))




   R     ->DPs

       ->DP Problem 1
         ->Polo
       ->DP Problem 2
         ->Polo
       ->DP Problem 3
         ->AFS
       ->DP Problem 4
         ->Polo
       ->DP Problem 5
         ->Remaining Obligation(s)
       ->DP Problem 6
         ->Polo
       ->DP Problem 7
         ->Remaining Obligation(s)
       ->DP Problem 8
         ->Remaining Obligation(s)
       ->DP Problem 9
         ->Polo
       ->DP Problem 10
         ->Polo
       ->DP Problem 11
         ->Polo




The following remains to be proven:
*Dependency Pair:

Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))



*Dependency Pair:
IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, M) -> IN?-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, mtbag)
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))



*Dependency Pairs:
U11'(tt) -> SET?-@OSB@NATBAG@CSB@(mtbag)
SET?-@OSB@NATBAG@CSB@(N) -> U11'(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))



*Dependency Pairs:
U21'(tt, NB) -> SET?-@OSB@NATBAG@CSB@(NB)
SET?-@OSB@NATBAG@CSB@(__-`[NatBag`]-`[NatBag`](N, NB)) -> U21'(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))




   R     ->DPs

       ->DP Problem 1
         ->Polo
       ->DP Problem 2
         ->Polo
       ->DP Problem 3
         ->AFS
       ->DP Problem 4
         ->Polo
       ->DP Problem 5
         ->Remaining
       ->DP Problem 6
         ->Polo
       ->DP Problem 7
         ->Remaining
       ->DP Problem 8
         ->Remaining
       ->DP Problem 9
         ->Polynomial Ordering
       ->DP Problem 10
         ->Polo
       ->DP Problem 11
         ->Polo


Dependency Pairs:
TICKETS-@OSB@PROCSET@CSB@(__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> TICKETS-@OSB@PROCSET@CSB@(Ps)
TICKETS-@OSB@PROCSET@CSB@(__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> TICKETS-@OSB@PROCSET@CSB@(Ps)
TICKETS-@OSB@PROCSET@CSB@(__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> TICKETS-@OSB@PROCSET@CSB@(Ps)
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))




The following dependency pairs can be strictly oriented:


   TICKETS-@OSB@PROCSET@CSB@(__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> TICKETS-@OSB@PROCSET@CSB@(Ps)
   TICKETS-@OSB@PROCSET@CSB@(__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> TICKETS-@OSB@PROCSET@CSB@(Ps)
   TICKETS-@OSB@PROCSET@CSB@(__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> TICKETS-@OSB@PROCSET@CSB@(Ps)


There are no usable rules w.r.t. to the implicit AFS that need to be oriented.


Used ordering: Polynomial ordering with Polynomial interpretation:
POL(crit-`[NatBag`](x_1)) = 1
POL(TICKETS-@OSB@PROCSET@CSB@(x_1)) = x_1
POL(__-`[ProcSet`]-`[ProcSet`](x_1, x_2)) = 1 + x_1*x_2
POL(wait-`[NatBag`](x_1)) = 1
POL(idle) = 1

 resulting in one new DP problem.




   R     ->DPs

       ->DP Problem 1
         ->Polo
       ->DP Problem 2
         ->Polo
       ->DP Problem 3
         ->AFS
       ->DP Problem 4
         ->Polo
       ->DP Problem 5
         ->Remaining
       ->DP Problem 6
         ->Polo
       ->DP Problem 7
         ->Remaining
       ->DP Problem 8
         ->Remaining
       ->DP Problem 9
         ->Polo
       ->DP Problem 10
         ->Polynomial Ordering
       ->DP Problem 11
         ->Polo


Dependency Pair:
TICKETS-BELOW-@OSB@NATBAG@CSB@(s_-`[NatBag`](N)) -> TICKETS-BELOW-@OSB@NATBAG@CSB@(N)
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))




The following dependency pair can be strictly oriented:


   TICKETS-BELOW-@OSB@NATBAG@CSB@(s_-`[NatBag`](N)) -> TICKETS-BELOW-@OSB@NATBAG@CSB@(N)


There are no usable rules w.r.t. to the implicit AFS that need to be oriented.


Used ordering: Polynomial ordering with Polynomial interpretation:
POL(s_-`[NatBag`](x_1)) = 1 + x_1
POL(TICKETS-BELOW-@OSB@NATBAG@CSB@(x_1)) = 1 + x_1

 resulting in one new DP problem.




   R     ->DPs

       ->DP Problem 1
         ->Polo
       ->DP Problem 2
         ->Polo
       ->DP Problem 3
         ->AFS
       ->DP Problem 4
         ->Polo
       ->DP Problem 5
         ->Remaining
       ->DP Problem 6
         ->Polo
       ->DP Problem 7
         ->Remaining
       ->DP Problem 8
         ->Remaining
       ->DP Problem 9
         ->Polo
       ->DP Problem 10
         ->Polo
       ->DP Problem 11
         ->Polynomial Ordering


Dependency Pair:
<=-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, M)
Rules:

   init-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](0, 0, Is)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M')))) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   mutex-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M'))) -> true
   __-`[ProcSet`]-`[ProcSet`](none, X) -> X
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](A, X@@@)
   _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _xor_-`[Bool`]-`[Bool`](false, X@@@)
   _xor_-`[Bool`]-`[Bool`](A, A) -> false
   _xor_-`[Bool`]-`[Bool`](false, A) -> A
   in?-`[NatBag`]-`[NatBag`](N, M) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, mtbag))
   in?-`[NatBag`]-`[NatBag`](N, mtbag) -> false
   in?-`[NatBag`]-`[NatBag`](N, __-`[NatBag`]-`[NatBag`](M, NB)) -> _or_-`[Bool`]-`[Bool`](equ-`[NatBag`]-`[NatBag`](N, M), in?-`[NatBag`]-`[NatBag`](N, NB))
   _or_-`[Bool`]-`[Bool`](A, B) -> _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B))
   equ-`[NatBag`]-`[NatBag`](N, N) -> true
   equ-`[NatBag`]-`[NatBag`](0, s_-`[NatBag`](N)) -> false
   equ-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](N')) -> equ-`[NatBag`]-`[NatBag`](N, N')
   equ-`[NatBag`]-`[NatBag`](N, s_-`[NatBag`](N)) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, crit-`[NatBag`](M))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](Ws, crit-`[NatBag`](M)))) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ws)) -> true
   good-state-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, __-`[ProcSet`]-`[ProcSet`](crit-`[NatBag`](N'), crit-`[NatBag`](M')))) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`]-`[NatBag`](N, N, NB)) -> false
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, NB)) -> U21(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, NB), false), NB)
   set?-`[NatBag`](__-`[NatBag`]-`[NatBag`](N, N)) -> false
   set?-`[NatBag`](mtbag) -> true
   set?-`[NatBag`](N) -> U11(equal-`[Bool`]-`[Bool`](in?-`[NatBag`]-`[NatBag`](N, mtbag), false))
   tickets-`[ProcSet`](idle) -> tickets-`[ProcSet`](none)
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](idle, Ps)) -> tickets-`[ProcSet`](Ps)
   tickets-`[ProcSet`](Is) -> mtbag
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, wait-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](__-`[ProcSet`]-`[ProcSet`](Ps, crit-`[NatBag`](N))) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](Ps))
   tickets-`[ProcSet`](wait-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   tickets-`[ProcSet`](crit-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-`[ProcSet`](none))
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](A, X@@@, _xor_-`[Bool`]-`[Bool`](B, C)) -> _and_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C)))
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](A, _xor_-`[Bool`]-`[Bool`](B, C)) -> _xor_-`[Bool`]-`[Bool`](_and_-`[Bool`]-`[Bool`](A, B), _and_-`[Bool`]-`[Bool`](A, C))
   _and_-`[Bool`]-`[Bool`](A, A) -> A
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   sub-bag-`[NatBag`]-`[NatBag`](NB, __-`[NatBag`]-`[NatBag`](NB, NB')) -> true
   sub-bag-`[NatBag`]-`[NatBag`](NB, NB) -> true
   sub-bag-`[NatBag`]-`[NatBag`](mtbag, NB') -> true
   __-`[NatBag`]-`[NatBag`](mtbag, X) -> X
   unique-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> set?-`[NatBag`](tickets-`[ProcSet`](Ps))
   U21(tt, NB) -> set?-`[NatBag`](NB)
   equal-`[Bool`]-`[Bool`](X, X) -> tt
   tickets-below-`[NatBag`](0) -> mtbag
   tickets-below-`[NatBag`](s_-`[NatBag`](N)) -> __-`[NatBag`]-`[NatBag`](N, tickets-below-`[NatBag`](N))
   U11(tt) -> set?-`[NatBag`](mtbag)
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), 0) -> false
   <=-`[NatBag`]-`[NatBag`](N, N) -> true
   <=-`[NatBag`]-`[NatBag`](0, N) -> true
   <=-`[NatBag`]-`[NatBag`](s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-`[NatBag`]-`[NatBag`](N, M)
   _implies_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_xor_-`[Bool`]-`[Bool`](A, _and_-`[Bool`]-`[Bool`](A, B)))
   not_-`[Bool`](A) -> _xor_-`[Bool`]-`[Bool`](true, A)
   bounded-tickets-`[State`](_:_`[_`]-`[NatBag`]-`[NatBag`]-`[ProcSet`](N, M, Ps)) -> sub-bag-`[NatBag`]-`[NatBag`](tickets-`[ProcSet`](Ps), tickets-below-`[NatBag`](N))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, _xor_-`[Bool`]-`[Bool`]-`[Bool`](A, B, _and_-`[Bool`]-`[Bool`](A, B)))




The following dependency pair can be strictly oriented:


   <=-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(s_-`[NatBag`](N), s_-`[NatBag`](M)) -> <=-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(N, M)


There are no usable rules w.r.t. to the implicit AFS that need to be oriented.


Used ordering: Polynomial ordering with Polynomial interpretation:
POL(s_-`[NatBag`](x_1)) = 1 + x_1
POL(<=-@OSB@NATBAG@CSB@-@OSB@NATBAG@CSB@(x_1, x_2)) = 1 + x_1

 resulting in one new DP problem.



The Proof could not be continued due to a Timeout.

Termination of R could not be shown.

Duration: 
0:30 minutes



