(fmod BAKERY-SYNTAX is
 sort Nat .
 op 0 : -> Nat [ctor] .
 op s_ : Nat -> Nat [ctor] .
 sorts ProcIdle ProcWait Proc ProcIdleSet ProcWaitSet ProcSet .
 subsorts ProcIdle < ProcIdleSet .
 subsorts ProcWait < ProcWaitSet .
 subsorts ProcIdle ProcWait < Proc < ProcSet .
 subsorts ProcIdleSet < ProcWaitSet < ProcSet .
 op idle : -> ProcIdle [ctor] .
 op wait : Nat -> ProcWait [ctor] .
 op crit : Nat -> Proc [ctor] .
 op none : -> ProcIdleSet [ctor] .
 op __ : ProcIdleSet ProcIdleSet -> ProcIdleSet [ctor assoc comm id: none] .
 op __ : ProcWaitSet ProcWaitSet -> ProcWaitSet [ctor ditto] .
 op __ : ProcSet ProcSet -> ProcSet [ctor ditto] .

 sort State .
 op _:_`[_`] : Nat Nat ProcSet -> State [ctor] .
endfm)

(mod BAKERY is
 pr BAKERY-SYNTAX .
 var Ps : ProcSet .
 vars N M : Nat .

 rl [in] : N : M [idle Ps] => s(N) : M [wait(N) Ps] .

 rl [serve] : N : M [wait(M) Ps] => N : M [crit(M) Ps] .

 rl [leave] : N : M [crit(M) Ps] => N : s(M) [idle Ps] .
endm)

(fmod BAKERY-PROPS is
 pr BAKERY-SYNTAX .
 pr BOOL-OPS .

 ops init mutex good-state bounded-tickets unique-tickets : State -> [Bool] .

 sort NatBag .
 subsort Nat < NatBag .
 op mtbag : -> NatBag .
 op __ : NatBag NatBag -> NatBag [assoc comm id: mtbag] .

 var Is : ProcIdleSet .     var Ws : ProcWaitSet .     vars Ps Ps' : ProcSet .
 vars N M M' N' : Nat .     var P : Proc .
 vars NB NB' NB'' : NatBag .

 eq [1] : bounded-tickets(N : M [Ps]) = sub-bag(tickets(Ps),tickets-below(N)) .

 op sub-bag : NatBag NatBag -> [Bool] .
 eq [a1] : sub-bag(NB,NB NB') = true .
---a eq [a2] : sub-bag(N NB,N NB') = sub-bag(NB,NB') .
---a ceq [a3] : sub-bag(N NB,NB') = false if in?(N,NB') = false .

 op tickets : ProcSet -> NatBag .
 eq [b1] : tickets(Is) = mtbag .
 eq [b2] : tickets(idle Ps) = tickets(Ps) .
 eq [b3] : tickets(wait(N) Ps) = N tickets(Ps) .
 eq [b4] : tickets(crit(N) Ps) = N tickets(Ps) .

 op tickets-below : Nat -> NatBag .
 eq [c1] : tickets-below(0) = mtbag .
 eq [c2] : tickets-below(s(N)) = N tickets-below(N) .

 eq [2] : init(0 : 0 [Is]) = true .
 eq [3] : unique-tickets(N : M [Ps]) = set?(tickets(Ps)) .

--- Some bags are sets 
 op set? : NatBag -> Bool .
 eq [d1] : set?(mtbag) = true .
ceq [d2] : set?(N NB) = set?(NB) if in?(N,NB) = false .
 eq [d3] : set?(N N NB) = false .

--- Bag membership
 op in? : Nat NatBag -> Bool .
 eq [e1] : in?(N,mtbag) = false .
 eq [e2] : in?(N, M NB) = equ(N,M) or in?(N,NB) .

--- Equality enrichment
 op equ : Nat Nat -> Bool [comm] .
 eq [f1] : equ(N,N) = true .
 eq [f2] : equ(0,0) = true .
 eq [f3] : equ(s(N),0) = false .
 eq [f4] : equ(s(N),s(N')) = equ(N,N') .
 eq [f5] : equ(s(N),N) = false .

--- Innequality (for theorem proving purposes)
 op <= : Nat Nat -> Bool .
 eq [g1] : <=(N,N) = true .
 eq [g2] : <=(0,N) = true .
 eq [g3] : <=(s(N),s(M)) = <=(N,M) .
 eq [g4] : <=(s(N),0) = false .

 eq [41] : good-state(N : M [Ws]) = true .
 eq [42] : good-state(N : M [crit(M) Ws]) = true .
 eq [43] : good-state(N : M [crit(M') crit(N') Ps]) = false .

 eq [51] : mutex(N : M [Ws]) = true .
 eq [52] : mutex(N : M [crit(M') Ws]) = true .
 eq [53] : mutex(N : M [crit(M') crit(N') Ps]) = false .
endfm)
