
(set include BOOL off .)

(fmod TRUTH-VALUE is
  sort Bool .
  op true : -> Bool [ctor special (id-hook SystemTrue)] .
  op false : -> Bool [ctor special (id-hook SystemFalse)] .
endfm)

(fmod BOOL-OPS is
  protecting TRUTH-VALUE .
  op _and_ : Bool Bool -> Bool [assoc comm prec 55] .
  op _or_ : Bool Bool -> Bool [assoc comm prec 59] .
  op _xor_ : Bool Bool -> Bool [assoc comm prec 57] .
  op not_ : Bool -> Bool [prec 53] .
  op _implies_ : Bool Bool -> Bool [gather (e E) prec 61] .
  vars A B C : Bool .
  eq true and A = A .
  eq false and A = false .
  eq A and A = A .
  eq false xor A = A .
  eq A xor A = false .
  eq A and (B xor C) = A and B xor A and C .
  eq not A = A xor true .
  eq A or B = A and B xor A xor B .
  eq A implies B = not(A xor A and B) .
endfm)

(fmod NAT is
  protecting BOOL-OPS .
  sorts Zero NzNat Nat .
  subsort Zero NzNat < Nat .
  
  op 0 : -> Zero [ctor] .
  op s_ : Nat -> NzNat [ctor] .
  --- por quÃ© no puedo usar:  special (id-hook SuccSymbol) ?
  
  --- Vars
  vars N M N' P : Nat .
  vars Nz Mz : NzNat .
  var B : Bool .
  
  --- BOOL operators over Nat
  op _==_ : Nat Nat -> Bool [comm prec 51] .
  eq [01] : 0 == 0 = true .
  eq [02] : 0 == s N = false .
  eq [03] : s N == s M = N == M .
  
  op _>_ : Nat Nat -> Bool [prec 37] .
  eq 0 > N = false .
  eq s N > 0 = true .
  eq s N > s M = N > M .
  
  op _>=_ : Nat Nat -> Bool [prec 37] .
  eq N >= M = N > M or N == M .
  
  op if_then_else_fi : Bool Nat Nat -> Nat .
  ceq if B then N else M fi = N if B .
  ceq if B then N else M fi = M if not B .
  --- END BOOL operators over Nat
  

  op _+_ : NzNat Nat -> NzNat [assoc comm prec 33] .
  op _+_ : Nat Nat -> Nat [ditto] .
  eq [04] : 0 + N = N .
  eq [05] : s N + M = s (N + M) .
  
  op sd : Nat Nat -> Nat [comm] .
  eq [06] : sd(N, 0) = N .
  eq [07] : sd(s N, s M) = sd(N, M) .
  
  op _*_ : NzNat NzNat -> NzNat [assoc comm prec 31] .
  op _*_ : Nat Nat -> Nat [ditto] .
  eq [08] : N * 0 = 0 .
  eq [09] : N * s M = N + (N * M) .
  eq [15] : N * (N' + M) = N * N' + N * M .
  
  
  op _quo_ : Nat NzNat -> Nat [prec 31 gather (E e)] .
  ceq [11] : N quo Nz = s 0 + sd(N, Nz) quo Nz if N >= Nz .
  ceq [12] : N quo Nz = 0 if not N >= Nz .
  
  op _rem_ : Nat NzNat -> Nat [prec 31 gather (E e)] .
  ceq [13] : N rem Nz = sd(N, Nz) rem Nz if N >= Nz .
  ceq [14] : N rem Nz = N if not N >= Nz .
  
  op _^_ : Nat Nat -> Nat [prec 29  gather (E e)] .
  op _^_ : NzNat Nat -> NzNat [ditto] .
  eq [16] : s N ^ 0 = s 0 .
  eq [17] : 0 ^ N = 0 .
  eq [18] : N ^ (s M) = N * (N ^ M) .
  
  *** exponential modulo  modExp(n,m,p) = n^m mod p  
  op modExp : Nat Nat NzNat ~> Nat .
  eq [19] : modExp(N, M, P) = (N ^ M) rem P .
  
***(  op gcd : NzNat Nat -> NzNat [assoc comm] .
  op gcd : Nat Nat -> Nat [ditto] .
  eq [20] : gcd(N, 0) = 0 .
  eq [21] : gcd(Nz, Nz) = Nz .
  ceq [22] : gcd(Nz, Mz) = gcd(sd(Nz, Mz), Mz) if Nz > Mz .
  eq [23] : gcd(Nz, Nz, Mz) = gcd(Nz, Mz) .)***
  
  ***(op min : NzNat NzNat -> NzNat [assoc comm] .
  ---op min : Nat Nat -> Nat [ditto] .
  ---eq [26] : min(N, 0) = 0 .
  ---ceq [27] : min(Nz, Mz) = Nz if Nz == Mz .
  ceq [24] : min(Nz, Mz) = Nz if Nz = Mz .
  ---ceq [20] : min(s N, s M) = min if Nz >= Mz .
  ---eq [25] : min(Nz, Mz) = if Nz > Mz then Mz else Nz fi .
  
  op max : NzNat Nat -> NzNat [assoc comm] .
  op max : Nat Nat -> Nat [ditto] .
  ---ceq [25] : max(N, M) = N if N >= M .
  )***
 
  
  op _<_ : Nat Nat -> Bool [prec 37] .
  eq [30] : N < M = not N >= M .

  op _<=_ : Nat Nat -> Bool [prec 37] .
  eq [31] : N <= M = not N > M .

  op _divides_ : NzNat Nat -> Bool [prec 51] .
  eq [33] : Nz divides N = (N rem Nz) == 0 .
  
endfm)

(fmod INT is
  protecting NAT .
  sorts NzInt Int .
  subsorts NzNat < NzInt Nat < Int .

  --- Vars
  vars I I' I'' : Int .
  vars NzI : NzInt .
  vars N N' : Nat .
  var Nz : NzNat .
  --- End Vars
  
  op -_ : NzNat -> NzInt [ctor] .
  op -_ : NzInt -> NzInt [ditto] .
  op -_ : Int -> Int [ditto] .
  
  op p_ : Int -> Int [ctor] .
  op p_ : Zero -> NzInt [ctor] .
  
  eq [44] : p s I = I .
  eq [45] : s p I = I .
  eq [48] : - 0 = 0 .
  eq [40] : - - I = I .

  eq [41] : - p 0 = s 0 .
  eq [42] : - s 0 = p 0 .
  
  op _+_ : Int Int -> Int [assoc comm prec 33] .
  eq [43] : 0 + I = I .
  eq [46] : (s N) + (p I) = N + I .
  ***(
     cp INT824 for 46 and 46
     #2:Int + N:Nat + p I:Int
     = I:Int + N:Nat + p #2:Int .
  )
  ---eq [47] : p I + I' = p (I + I') .
  ***(
     cp INT2573 for 44 and 47
       I':Int + #3:Nat
       = p(I':Int + s #3:Nat).
  )
  
***(
  op _+_ : Int Int -> Int [assoc comm prec 33] .
  eq [48] : I + 0 = I .
  eq [49] : I + s I' = s (I + I') .
  eq [50] : I + p I' = p (I + I') .
  )
  
  op _-_ : Int Int -> Int [prec 33 gather (E e)] .
  eq [47] : I - 0 = I .
  eq [49] : 0 - I = - I .
  eq [50] : s N - s N' = N - N' .
  ---eq [47] : I - p I' = s (I - I') .
  
endfm)

eof

***(op gcd0 : Nat Nat -> Nat [assoc comm] .
  
  eq [20] : gcd(Nz, Nz) = Nz .
  ceq [21] : gcd(Nz, Mz) = gcd0(Nz, Mz) [owise] .
  eq [23] : gcd0(0, N) = N .
  ceq [22] : gcd0(Nz, Mz) = gcd(sd(Nz, Mz), Mz) if Nz > Mz .)

***(eq [21] : gcd(Nz, Mz) = if (Nz == Mz) then
  								Nz
  						  else  if Nz > Mz then
  						  	 		gcd(sd(Nz, Mz), Mz)
  						  		else
  						  	 		gcd(Nz, sd(Mz, Nz)) 
  						  		fi
  						  fi .
  syntax error
  )
  
  ***(eq [20] : gcd(N, 0) = N .
  eq [21] : gcd(Nz, M) = gcd(Nz, sd(M, Nz * (M quo Nz))) .
  stack overflow
  )
  
  ---eq [23] : gcd(N, N) = N .
  ---eq [22] : gcd(Nz, Nz) = gcd(Nz, 0) .
  ***(
  ceq [22] : gcd(Nz, Mz) = Nz if Nz == Mz .
  ccp NAT2732 for 22 and 22
    Mz:NzNat
    = Nz:NzNat
    if Nz:NzNat == Mz:NzNat = true /\ Nz:NzNat == Mz:NzNat = true .
  )
  ***ceq [21] : gcd(Nz, Mz) = gcd(Mz, sd(Nz, Mz * (Nz quo Mz))) if Nz > Mz .
  
  op lcm : NzNat NzNat -> NzNat [assoc comm] .
  op lcm : Nat Nat -> Nat [ditto] .
  ---eq [23] : lcm(N, M) = (N * M) quo (gcd(N, M)) .
