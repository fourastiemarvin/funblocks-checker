---- El segundo problema puede que no se de, pero se presentara pronto como problema
---- potencial en la nueva version que usa ACU.  Se puede ilustrar con un modulo sencillo.

set include BOOL off .

fmod GOTCHA1! is
  sorts A B .
  subsorts A < B .
  op e : -> B .
  op f : B B -> B [assoc comm id: e] .
  op k : B -> B .
  op g : B -> B .
  op g : A -> A .

  eq f(g(X:B),Y:B) = f(k(X:B),Y:B) .
endfm

---- Si usamos este modulo como tal, sin ninguna transformacion que
---- elimine el axioma de igualdad, NO SE GENERA NINGUNA OBLIGACION DE PRUEBA,
---- dado que los sorts de ambos lados de las ecuaciones especializadas son
---- siempre ambos el sort B.
---- 
---- Sin embargo, la especificacion NO ES SORT DECREASING, ya que
---- podemos aplicar la ecuacion, con Y:B |-> e, modulo ACU al termino g(X:A) y obtenemos
---- 
----  g(X:A) => k(X:A)
---- 
---- que sube del sort A al sort B.
---- 
---- Que hace ahora mismo la herramienta?  Usa el modulo tal cual para
---- calcular las especializaciones, o usa el modulo transformado con
---- las identidades como reglas y con las variantes???
---- 
---- Si usa el modulo transformado, detectara el problema, pero si
---- no, fallara en detectarlo.
---- 
---- La conclusion a todo esto es que, aunque podemos usar ACU para
---- calcular los pares criticos en una version futura (supesto que la
---- especificacion sea preregular modulo los axiomas, cosa comprobada
---- por Core Maude), en el calculo de MMA(\cR) LOS AXIOMAS DE IDENTIDAD
---- SE DEBEN HABER CONVERTIDO EN REGLAS ANTES DE CALCULAR
---- MMA(\cR).

select MFE .
loop init .
(select tool CRC .)
set trace on .
set trace select on .
trace select ---- crcCritPairs 
             ---- prepNarrowingSols
             ---- getCPTerm
             ---- $prepareModuleNoIds
             ---- removeLonelyAssocs
             removeIdsUnif
             ---- descentCheck
             ---- descentCheck1
             ---- eqInstanceSet
             .
set print conceal off .
(check Church-Rosser GOTCHA1! .)