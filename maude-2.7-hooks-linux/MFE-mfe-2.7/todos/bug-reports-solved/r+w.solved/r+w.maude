---------------------------
--- Readers and Writers ---
---------------------------

(fmod R&W-SYNTAX is
  sort Nat .
  op 0 : -> Nat [ctor] .
  op s : Nat -> Nat [ctor] .  
  sort State .
  op <_`,_> : Nat Nat -> State [ctor] .
endfm)

(mod R&W is
  pr R&W-SYNTAX .
  vars R W : Nat .

  rl [w-enter] : < 0, 0 > => < 0, s(0) > .
  rl [w-leave] : < R, s(W) > => < R, W > .
  rl [r-enter] : < R, 0 > => < s(R), 0 > .
  rl [r-leave] : < s(R), W > => < R, W > .
endm)

(fmod R&W-PROPS is
  pr R&W-SYNTAX .
  pr BOOL-OPS .

  vars R W : Nat .

  ops init one-writer mutex smutex : State -> [Bool] .

  --- set of initial states
  eq [init] : init(< R, 0 >) = true .

  --- at most one writer
  eq [w=0] : one-writer(< R, 0 >) = true .
  eq [w=1] : one-writer(< R, s(0) >) = true .
  eq [w>1] : one-writer(< R, s(s(W)) >) = false .

  --- mutual exclusion between readers and writers
  eq [w=0] : mutex(< R, 0 >) = true .
  eq [r=0] : mutex(< 0, W >) = true .
  eq [no-mutex] : mutex(< s(R), s(W) >) = false .

  --- stronger mutual exclusion: any number of readers with 0 
  --- writers, and at most 1 writer without any readers
  eq [r=any-w=0] : smutex(< R, 0 >) = true .
  eq [r=0-w=1] : smutex(< 0, s(0) >) = true .
  eq [no-smutex] : smutex(< s(R), s(W) >) = false .
endfm)
