----------------------
--- QLOCK protocol ---
----------------------
--- taken from
--- http://www.jaist.ac.jp/~kokichi/class/i613-0912/cafeobjCode/qlockPS/index.html

set protecting BOOL off .
----set protecting BOOL-OPS on .

fmod NAT2 is
  sort Nat .
  op 0 : -> Nat [ctor] .
  op s_ : Nat -> Nat [ctor] .
  op _+_ : Nat Nat -> Nat .
  vars M N : Nat .
  eq M + 0 = M .
  eq M + s(N) = s(M + N) .
endfm

fmod QLOCK-SYNTAX is
  pr BOOL-OPS .
  pr NAT2 .

  sort Soup .
  subsort Nat < Soup .
  op none : -> Soup [ctor] .
  op __ : Soup Soup -> Soup [ctor assoc comm id: none] .
  op set? : Soup -> Bool .
  op in? : Nat Soup -> Bool .
  op = : Nat Nat -> Bool [comm] .

  sort Queue .
  op mt : -> Queue [ctor] .
  op _@_ : Nat Queue -> Queue [ctor] .
  op _;_ : Queue Queue -> Queue .
  eq mt ; Q:Queue = Q:Queue .
  eq (N:Nat @ Q1:Queue) ; Q2:Queue = N:Nat @ (Q1:Queue ; Q2:Queue) .

  sort State .
  op _|_|_|_ : Soup Soup Soup Queue -> State [ctor] .

  ops init mutex aux : State -> [Bool] .
endfm

mod QLOCK is
  pr QLOCK-SYNTAX .

  vars Si Sw Sc : Soup .   var Q : Queue .   vars N N' : Nat .

  rl Si N | Sw | Sc | Q => Si | Sw N | Sc | Q ; (N @ mt ) .

  rl Si | Sw N | Sc | N @ Q => Si | Sw | Sc N | N @ Q .

  rl Si | Sw | Sc N | N' @ Q => Si N | Sw | Sc | Q .
endm

fmod QLOCK-PROPS is
  pr QLOCK-SYNTAX .

  vars Si Sw Sc : Soup .    var Q : Queue .    vars N N' : Nat .

--- Initial states
  ceq init( Si | none | none | mt ) = true if set?(Si) .

--- Mutual exclusion property
  eq mutex( Si | Sw | none | Q ) = true .
  eq mutex( Si | Sw | N | N @ Q ) = true .
  eq mutex( Si | Sw | N N' Sc | Q ) = false .

--- Auxiliary invariant
  ceq aux( Si | Sw | none | Q ) = true if set?(Si Sw) .
  ceq aux( Si | Sw | N | N @ Q ) = true if set?(Si Sw N) .
  eq aux( Si | Sw | N N' Sc | Q ) = false .
--- equivalently
--- ceq aux( Si | Sw | Sc | Q ) = false if set?(Si Sw Sc) = false .

--- Equality enrichments
  eq =(N,N) = true .            --- Added for confluence
  eq =(0,0) = true .
  eq =(s(N),0) = false .
  eq =(s(N),s(N')) = =(N,N') .
 ceq [eqenrich] : N = N' if =(N,N') [nonexec] .

--- Soup membership
  eq in?(N,none) = false .
  eq in?(N, N' Si) = =(N,N') or in?(N,Si) .

--- Some soups are sets 
  eq set?(none) = true .
  ceq set?(N Si) = true if in?(N,Si) = false /\ set?(Si) .
  ceq set?(N Si) = false if in?(N,Si) = true .
  eq set?(N N Si) = false .
endfm
