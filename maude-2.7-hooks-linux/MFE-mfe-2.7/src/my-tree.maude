(view $T from TRIV to MY-NAT is sort Elt to MY-NAT . endv)

(fmod MY-NAT is
 sort MY-NAT .
 op zero : -> MY-NAT .
 op succ : MY-NAT -> MY-NAT .
endfm)

(fmod MY-TREE{X :: TRIV} is
 sort MY-TREE{X} .
 op empty : -> MY-TREE{X} .
 op leaf : X$Elt -> MY-TREE{X} .
 op node : MY-TREE{X} MY-TREE{X} -> MY-TREE{X} .
endfm)

(fmod FUNRULES is

 including MY-NAT .
 protecting MY-TREE{$T} .

 sort $T .

 var $x : MY-NAT .
 var $y : MY-NAT .
 var $a : MY-TREE{$T} .
 var $b : MY-TREE{$T} .

 op add : MY-NAT MY-NAT -> MY-NAT .
 op depth : MY-TREE{$T} -> MY-NAT .
 op maxi : MY-NAT MY-NAT -> MY-NAT .

 eq depth(empty) = zero .
 eq depth(node($a, $b)) = succ(maxi(depth($a), depth($b))) .

 eq add($x, zero) = $x .
 eq add($x, succ($y)) = succ(add($x, $y)) .
 --- eq succ($x) = succ(succ($x)) .
 --- eq add($x, $y) = zero .
endfm)

(reduce in FUNRULES :
  depth(node(leaf(succ(zero)), leaf(zero))) . )
