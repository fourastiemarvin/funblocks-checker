---- from the book All About Maude
---- from the Maude Manual
---- by the Maude team

--- module used to parse the input (module) to use in the minimaude interpreter
fmod MINI-MAUDE is

  --- META-LEVEL contains all the operations (upTerm, downTerm, upModule,
  --- downModule,...) to go through metarepresentations
  protecting META-LEVEL .

  --- vars used to represent all possible types of inputs
  vars T T1 T2 T3 : Term . --- terms for declaration (module, eq,...)
  vars TL TL' : TermList . --- to get the list of tokens
  var  QI : Qid .        ---Qid used in solveBubbles to interprete parsed input
  var  QIL : QidList .
  var  F : Qid .        --- used in conditions of which parsed input we compute
  var  M : Module .  --- Module we currently building

  --- the following ones are used to build the module containing imports,
  --- sorts, op, axioms and equation
  var  I : Import .
  vars IL : ImportList .
  var  S : Sort .
  vars SS : SortSet .
  var  SsS : SubsortDeclSet .
  var  OD : OpDecl .
  var  ODS : OpDeclSet .
  var  MbS : MembAxSet .
  vars EqS EqS' : EquationSet .

  --- "root" function who parse the entire input T
  op processModule : Term ~> FModule .
  eq processModule(T) = solveBubbles(T, extractSignature(T)) .

  ---- extractSignature
  op extractSignature : Term ~> FModule .
  op extractSignature : Term FModule ~> FModule .
  --- build an empty fmodule of name downTerm(QI, 'error)
  --- this eq take care of the second part (declarations)
  eq extractSignature('fmod_is_endfm['token[QI], T])
   = extractSignature(T,
       fmod downTerm(QI, 'error) is nil sorts none . none none none none endfm) .

  --- build the module M by extracting the declarations given
  eq extractSignature('__[T1, T2], M)
   = extractSignature(T2, extractSignature(T1, M)) .
  eq extractSignature('sort_.['token[T]], M)
   = addSort(M, downTerm(T, 'error)) .
  eq extractSignature('op_:_->_.['token[T1], 'neTokenList[TL], 'token[T2]], M)
   = addOpDecl(M, (op downTerm(T1, 'error) : downTerm(TL, nil) -> downTerm(T2, 'error) [none] .)) .
  eq extractSignature('op_:`->_.['token[T1], 'token[T2]], M)
   = addOpDecl(M, (op downTerm(T1, 'error) : nil -> downTerm(T2, 'error) [none] .)) .
  eq extractSignature('including_.['token[T]], M)
   = addImport(M, including downTerm(T, 'error) .) .
  eq extractSignature(T, M) = M [owise] .

  ---- solveBubbles
  --- parse bubbles in eq (see syntaxe), transform bubble in terms
  op solveBubbles : Term FModule ~> FModule .
  op solveBubblesAux : Term FModule ~> EquationSet .

  eq solveBubbles('fmod_is_endfm['token[QI], T], M)
    = addEquations(M, solveBubblesAux(T, M)) .

  eq solveBubblesAux('eq_=_.[T1, T2], M)
    = (eq getTerm(processTerm(T1, M)) = getTerm(processTerm(T2, M)) [none] .) .
  eq solveBubblesAux('__['eq_=_.[T1, T2], T3], M)
    = (eq getTerm(processTerm(T1, M)) = getTerm(processTerm(T2, M)) [none] .
       solveBubblesAux(T3, M)) .
  ceq solveBubblesAux('__[F[TL], T2], M)
    = solveBubblesAux(T2, M)
    if F =/= 'eq_=_. .
  ceq solveBubblesAux(F[TL], M)
    = none
    if F =/= '__ /\ F =/= 'eq_=_. .

 --- reduce term (used in solveBubbles)
  op processTerm : Term Module ~> ResultPair .
  eq processTerm('bubble[T], M)
    = metaParse(M, downTerm(T, nil), anyType) .

  --- operations to add declarations in module
  op addSort : FModule Sort -> FModule .
  eq addSort(fmod QI is IL sorts SS . SsS ODS MbS EqS endfm, S)
   = fmod QI is IL sorts SS ; S . SsS ODS MbS EqS endfm .

  op addOpDecl : FModule OpDecl -> FModule .
  eq addOpDecl(fmod QI is IL sorts SS . SsS ODS MbS EqS endfm, OD)
   = fmod QI is IL sorts SS . SsS (OD ODS) MbS EqS endfm .

  op addImport : FModule Import -> FModule .
  eq addImport(fmod QI is IL sorts SS . SsS ODS MbS EqS endfm, I)
   = fmod QI is IL I sorts SS . SsS ODS MbS EqS endfm .

  op addEquations : FModule EquationSet -> FModule .
  eq addEquations(fmod QI is IL sorts SS . SsS ODS MbS EqS endfm, EqS')
   = fmod QI is IL sorts SS . SsS ODS MbS (EqS EqS') endfm .
endfm

load mini-maude-syntax.maude

reduce in MINI-MAUDE :
 processModule(
  getTerm(metaParse(upModule(
  'MINI-MAUDE-SYNTAX, false),
  'fmod 'NAT3 'is 'sort 'Nat3 '. 'op 's_ ': 'Nat3
  '-> 'Nat3 '. 'op '0 ': '-> 'Nat3 '. 'eq 's 's 's '0 '= '0 '.
  'endfm,
  'PreModule))) .

  --- reduce in MINI-MAUDE :
  ---  processModule(
  ---   getTerm(metaParse(upModule(
  ---   'MINI-MAUDE-SYNTAX, false),
  ---   'fmod 'NAT3 'is 'sort 'Nat3 '.
  ---   'eq 's 's 's '0 '= '0 '.
  ---   'endfm,
  ---   'PreModule))) .

***(
endfm
eof

  op extractSignature : Term ~> FModule .
  op extractSorts : Term ~> SortSet .
  op extractOpDecls : Term ~> OpDeclSet .

  eq extractSignature('fmod_is_endfm['token[QI], T])
    = (fmod downTerm(QI, 'error) is
         nil
         sorts extractSorts(T) .
         none
         extractOpDecls(T)
         none
         none
       endfm) .

  eq extractSorts('sort_.['token[T]]) = downTerm(T, 'error) .
  eq extractSorts('__['sort_.['token[T1]], T2])
    = downTerm(T1, 'error) ; extractSorts(T2) .
  ceq extractSorts(F[TL]) = none if F =/= '__ /\ F =/= 'sort_. .
  ceq extractSorts('__[F[TL], T])
    = extractSorts(T)
    if F =/= 'sort_. .

  eq extractOpDecls( 'op_:_->_.['token[T1], 'neTokenList[TL], 'token[T2]])
    = (op downTerm(T1, 'error) : downTerm(TL, nil)
            -> downTerm(T2, 'error) [none] .) .
  eq extractOpDecls('op_:`->_.['token[T1],'token[T2]])
    = (op downTerm(T1, 'error) : nil -> downTerm(T2, 'error)
         [none] .) .
  ceq extractOpDecls(F[TL])
    = none
    if F =/= '__ /\ F =/= 'op_:_->_. /\ F =/= 'op_:`->_. .

  eq extractOpDecls( '__['op_:_->_.['token[T1],'neTokenList[TL],'token[T2]], T3])
    = (op downTerm(T1, 'error) : downTerm(TL, nil)
            -> downTerm(T2, 'error) [none] .
      extractOpDecls(T3)) .
  eq extractOpDecls('__['op_:`->_.['token[T1],'token[T2]], T3])
    = (op downTerm(T1, 'error) : nil -> downTerm(T2, 'error) [none] .
       extractOpDecls(T3)) .
  ceq extractOpDecls('__[F[TL], T2]) = extractOpDecls(T2)
    if F =/= 'op_:_->_. /\ F =/= 'op_:`->_. .


Maude> red in MINI-MAUDE :
            extractSignature(
              getTerm(metaParse(upModule('MINI-MAUDE-SYNTAX, false),
               'fmod 'NAT3 'is
                  'op 's_ ': 'Nat3 '-> 'Nat3 '.
                  'sort 'Nat3 '.
                  'op '0 ': '-> 'Nat3 '.
                  'eq 's 's 's '0 '= '0 '.
               'endfm,
               'PreModule))) .
reduce in MINI-MAUDE : extractSignature(getTerm(metaParse(upModule(
  'MINI-MAUDE-SYNTAX, false), 'fmod 'NAT3 'is 'op 's_ ': 'Nat3 '-> 'Nat3 '.
  'sort 'Nat3 '. 'op '0 ': '-> 'Nat3 '. 'eq 's 's 's '0 '= '0 '. 'endfm,
  'PreModule))) .
rewrites: 33 in 0ms cpu (5ms real) (~ rewrites/second)
result FModule: fmod 'NAT3 is
nil
sorts 'Nat3 .
none
op '0 : nil -> 'Nat3 [none] .
op 's_ : 'Nat3 -> 'Nat3 [none] .
none
none
endfm

Maude> red in MINI-MAUDE :
            processModule(
              getTerm(metaParse(upModule('MINI-MAUDE-SYNTAX, false),
               'fmod 'NAT3 'is
                  'sort 'Nat3 '.
                  'op 's_ ': 'Nat3 '-> 'Nat3 '.
                  'op '0 ': '-> 'Nat3 '.
                  'eq 's 's 's '0 '= '0 '.
               'endfm,
               'PreModule))) .
reduce in MINI-MAUDE : processModule(getTerm(metaParse(upModule(
  'MINI-MAUDE-SYNTAX, false), 'fmod 'NAT3 'is 'sort 'Nat3 '. 'op 's_ ': 'Nat3
  '-> 'Nat3 '. 'op '0 ': '-> 'Nat3 '. 'eq 's 's 's '0 '= '0 '. 'endfm,
  'PreModule))) .
rewrites: 49 in 0ms cpu (0ms real) (~ rewrites/second)
result FModule: fmod 'NAT3 is
nil
sorts 'Nat3 .
none
op '0 : nil -> 'Nat3 [none] .
op 's_ : 'Nat3 -> 'Nat3 [none] .
none
eq 's_['s_['s_['0.Nat3]]] = '0.Nat3 [none] .
endfm

Maude> red in MINI-MAUDE :
            processModule(
              getTerm(metaParse(upModule('MINI-MAUDE-SYNTAX, false),
               'fmod 'NAT3 'is
                  'sort 'Nat3 '.
                  'op 's_ ': 'Nat3 '-> 'Nat3 '.
                  'op '0 ': '-> 'Nat3 '.
                  'eq 's 's 's 'N:Nat3 '= 'N:Nat3 '.
               'endfm,
               'PreModule))) .
reduce in MINI-MAUDE : processModule(getTerm(metaParse(upModule(
  'MINI-MAUDE-SYNTAX, false), 'fmod 'NAT3 'is 'sort 'Nat3 '. 'op 's_ ': 'Nat3
  '-> 'Nat3 '. 'op '0 ': '-> 'Nat3 '. 'eq 's 's 's 'N:Nat3 '= 'N:Nat3 '.
  'endfm, 'PreModule))) .
rewrites: 49 in 0ms cpu (0ms real) (~ rewrites/second)
result FModule: fmod 'NAT3 is
nil
sorts 'Nat3 .
none
op '0 : nil -> 'Nat3 [none] .
op 's_ : 'Nat3 -> 'Nat3 [none] .
none
eq 's_['s_['s_['N:Nat3]]] = 'N:Nat3 [none] .
endfm
)
