fmod FUNBLOCKS-SYNTAX is
  protecting QID-LIST .
  sorts Token Bubble NeTokenList .

  op token : Qid -> Token
       [special
          (id-hook Bubble        (1 1)
           op-hook qidSymbol     (<Qids> : ~> Qid))] .

  op bubble : QidList -> Bubble
       [special
          (id-hook Bubble        (1 -1)
           op-hook qidListSymbol (__ : QidList QidList ~> QidList)
           op-hook qidSymbol     (<Qids> : ~> Qid)
           id-hook Exclude       (.))] .

  op neTokenList : QidList -> NeTokenList
       [special
          (id-hook Bubble        (1 -1)
           op-hook qidListSymbol (__ : QidList QidList ~> QidList)
           op-hook qidSymbol     (<Qids> : ~> Qid)
           id-hook Exclude       (=>))] .

  sorts Term Var SubTerm Func Decl .
  subsort Var Func Token SubTerm < Term .


  op case_=>_ : Term Term -> Decl .

  op $_ : Token -> Var [prec 11] .

  op _(_) : Token Token -> Func [prec 22] .

  op _(_) : Token Term -> Func [prec 33] .

  op _,_ : Term Term -> Term [gather (E e)] .

endfm

--- TESTS

--- reduce in META-LEVEL :
---   metaParse(upModule('FUNBLOCKS-SYNTAX, false),
            --- 'case '$ 'f '=> 'f '`( 'g '`( '$ 'p '`, 'y '`) '`, 'h '`, 'l '`, '$ 'l '`) , anyType) .
            --- 'case '$ 'f '=> 'f '`( 'g '`, 'h '`) , anyType) .
---
--- reduce in META-LEVEL :
---   metaParse(upModule('FUNBLOCKS-SYNTAX, false),
---             'init 'area 'r , anyType) .
---
--- reduce in META-LEVEL :
---   metaParse(upModule('FUNBLOCKS-SYNTAX, false),
---     'f '`( 'g '`( '$ 'a '`) '`) , anyType) .
---
--- reduce in META-LEVEL :
---   metaParse(upModule('FUNBLOCKS-SYNTAX, false),
---     'case 'f '`( '$ 'x '`) '=> 'a , anyType) .
---
--- reduce in META-LEVEL :
---   metaParse(upModule('FUNBLOCKS-SYNTAX, false),
---     'a , anyType) .
