fmod FUNBLOCKS is
  protecting META-LEVEL .
  --- including VENDING-MACHINE-SIGNATURE .
  --- including FUNBLOCKS-SYNTAX .
  inc LEXICAL .

  vars T T1 T2 T3 : Term . --- terms for declaration (module, eq,...)
  vars TL TL' : TermList . --- to get the list of tokens
  var  QI : Qid .        ---Qid used in solveBubbles to interprete parsed input
  var  QIL : QidList .
  var  F : Qid .        --- used in conditions of which parsed input we compute
  var  M : Module .  --- Module we currently building
  var R : Rule .

  --- the following ones are used to build the module containing imports,
  --- sorts, op, axioms and equation
  var  I : Import .
  vars IL : ImportList .
  var  S : Sort .
  vars SS : SortSet .
  var  SsS : SubsortDeclSet .
  var  OD : OpDecl .
  var  ODS : OpDeclSet .
  var  MbS : MembAxSet .
  vars EqS EqS' : EquationSet .
  var RlS : RuleSet .

  --- "root" function who parse the entire input T
  --- op processModule : Term ~> Decl .
  --- eq processModule(T)
  ---  = solveBubbles(T,
  ---       mod 'FUNRULES is nil sorts none . none none none none none endm ) .

  op solveBubbles : Term ~> Rule .
  op solveBubblesAux : Term ~> Term .

  eq solveBubbles('case_=>_[T1, T2])
   --- = rl getTerm(processTerm(solveBubblesAux(T1)))
   ---      => getTerm(processTerm(solveBubblesAux(T2))) [none] . .

  = rl getTerm(processTerm(T1)) => getTerm(processTerm(T2)) [none] . .

  eq solveBubblesAux('bubble['__[T1,T2]])
   = 'bubble[T2] .


 op processTerm : Term ~> ResultPair .
 eq processTerm('bubble[T])
 --- eq processTerm(T, M)
  --- = metaParse(upModule('FUNBLOCKS-SYNTAX, false), downTerm(T, nil), anyType) .
  = metaParse(upModule('FUNBLOCKS-SYNTAX, false), T, anyType) .
  --- = metaParse(M, downTerm(T, nil), anyType) .
  --- = metaParse(M, T, anyType) .

  --- op dummy : -> Nat .
  --- eq dummy = 0 .

endfm

--- TESTS

load funblocks-syntax.maude

--- reduce in FUNBLOCKS :
---    solveBubbles(
---      getTerm(metaParse(upModule('FUNBLOCKS-SYNTAX, false),
---       tokenize("case f => g") , anyType)
---           )) .
