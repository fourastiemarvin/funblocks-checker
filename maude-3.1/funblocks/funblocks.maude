fmod FUNBLOCKS is
  protecting META-LEVEL .
  --- including VENDING-MACHINE-SIGNATURE .
  --- including FUNBLOCKS-SYNTAX .
  inc LEXICAL .

  vars T T1 T2 T3 : Term . --- terms for declaration (module, eq,...)
  vars TL TL' : TermList . --- to get the list of tokens
  vars  QI QI1 QI2 : Qid .        ---Qid used in solveBubbles to interprete parsed input
  var  QIL1 QIL2 : QidList .
  var  F : Qid .        --- used in conditions of which parsed input we compute
  var  M : Module .  --- Module we currently building
  var R : Rule .
  --- var D : Decl .

  op getCase : ResultPair ~> QidList .
  eq getCase({'case_=>_[T1, T2], 'Decl})
   = solveBubble(T1, T2) .

  op solveBubble : Term Term ~> QidList .
  op solveBubbleAux : Term ~> QidList .

 --- redirect to getVar(), getConst() or getFunc()
  eq solveBubble(T1, T2)
   = getDecl(T1) getDecl(T2) getRule(redTerm(T1), redTerm(T2)) .

--- Maude declaration for a variable
  op getDecl : Term ~> QidList .
  eq getDecl('$_['token[QI]])
   = 'var redTerm('$_['token[QI]]) ': 'Untyped '. '\n .

  --- op getDecl : Term ~> QidList .
  --- eq getConst()
  ---  = 'op QI ': '-> 'Untyped '. '\n .

--- Maude declaration for a function
--- TODO: general case (n-ary, nested functions)
  op getDecl : Term ~> QidList .
  eq getDecl('_`(_`)['token[QI1], 'token[QI2]])
   = 'op getName(QI1) ': 'Untyped '-> 'Untyped '. '\n
     'op getName(QI2) ': '-> 'Untyped '. '\n .

--- get the QidList of a variable
  op redTerm : Term ~> QidList .
  eq redTerm('$_['token[QI]])
   = tokenize("$" + string(getName(QI))) .

--- get the QidList of a function
  eq redTerm('_`(_`)['token[QI1], 'token[QI2]])
   = getName(QI1) '`( getName(QI2) '`) .

  op getRule : QidList QidList ~> QidList .
  eq getRule(QIL1, QIL2)
   = 'rl QIL1 '=> QIL2 '. .

endfm

--- TESTS

load funblocks-syntax.maude

--- reduce in FUNBLOCKS :
  --- solveBubble(tokenize("$ f")) .
  --- getCase(metaParse(upModule('FUNBLOCKS-SYNTAX, false), tokenize("case $ f => $ g"), anyType)) .
  --- getCase(metaParse(upModule('FUNBLOCKS-SYNTAX, false), tokenize("case $ x => id( a)"), anyType)) .



   --- tokenize("case $f => $g")
   --- solveBubbles(
   ---   getTerm(metaParse(upModule('FUNBLOCKS-SYNTAX, false),
   ---    tokenize("case $ f => $ g") , anyType)
   ---        )) .
--- reduce in FUNBLOCKS :
---    getName(processTerm(solveBubblesAux('bubble[''f.Qid]))) .
