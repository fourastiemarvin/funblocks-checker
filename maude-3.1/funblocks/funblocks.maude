fmod FUNBLOCKS is
  protecting META-LEVEL .
  inc LEXICAL .

  vars T T1 T2 : Term .       --- terms for declaration (module, eq,...)
  vars TL1 TL2 : TermList .    --- to get the list of tokens
  vars  QI QI1 QI2 QI3 : Qid .    ---Qid used in solveBubbles to interprete parsed input
  var  QIL QIL1 QIL2 : QidList .  --- List of Qid which represent left term and right term
  var  F : Qid .              --- used in conditions of which parsed input we compute
  var  M : Module .           --- Module we currently building

--- root function
  op getCase : ResultPair ~> QidList .
  eq getCase({'case_=>_[T1, T2], 'Decl})
   = solveBubble(T1, T2) .

  op solveBubble : Term Term ~> QidList .
  op solveBubbleAux : Term ~> QidList .

 --- redirect to getVar(), getConst() or getFunc()
  eq solveBubble(T1, T2)
   = getDecl(T1) getDecl(T2) getRule(redTerm(T1), redTerm(T2)) .

--- Maude declaration for a variable
  op getDecl : Term ~> QidList .
  eq getDecl('$_['token[QI]])
   = 'var redTerm('$_['token[QI]]) ': 'Untyped '. '\n .

--- Maude declaration for a constant
  eq getDecl('token[QI])
   = 'op getName(QI) ': '-> 'Untyped '. '\n .

--- Maude declaration for a function
  eq getDecl('_`(_`)['token[QI1], T2])
   = 'op getName(QI1) ': 'Untyped '-> 'Untyped '. '\n
      getDecl(T2) .

--- get declaration for subterms in n-ary functions
  eq getDecl('_`,_[T1, T2])
   = getDecl(T1) getDecl(T2) .

--- get the QidList of a variable
  op redTerm : Term ~> QidList .
  eq redTerm('$_['token[QI]])
   = tokenize("$" + string(getName(QI))) .

--- get the QidList of a constant
  eq redTerm('token[QI])
   = getName(QI) .

--- get the QidList of a function
  eq redTerm('_`(_`)['token[QI1], T2])
   = getName(QI1) '`( redTerm(T2) '`) .

--- reduce subterms of n-ary functions
  eq redTerm('_`,_[T1, T2])
   = redTerm(T1) '`, redTerm(T2) .

--- get the rule declaration
  op getRule : QidList QidList ~> QidList .
  eq getRule(QIL1, QIL2)
   = 'rl QIL1 '=> QIL2 '. .

endfm

--- TESTS

--- load funblocks-syntax.maude

--- reduce in FUNBLOCKS :
---   getCase(metaParse(upModule('FUNBLOCKS-SYNTAX, false), tokenize("case $ f => $ g"), anyType))
---   getCase(metaParse(upModule('FUNBLOCKS-SYNTAX, false), tokenize("case $ x => id( g(a))"), anyType)) .
  --- getCase(metaParse(upModule('FUNBLOCKS-SYNTAX, false), tokenize("case $ f => f ( g , h , l , $ l )"), anyType)) .
