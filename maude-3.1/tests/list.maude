--- view Oid from TRIV to NAT is
---   sort Elt to Nat .
--- endv

fmod MY-LIST{T :: TRIV} is

  protecting LIST{T} .
  protecting NAT .
  protecting QID .

  --- sorts List{X$Elt} .
  subsort Qid < T$Elt < List{T} .
  --- subsort Nat < Y$Elt < List{Y$Elt} .
  vars $x $y : T$Elt .
  vars $tail : List{T} .

--- constructed with 'type'
  op empty : -> List{T} .
  op ajoute : T$Elt List{T} -> List{T} .
  op cons : T$Elt List{T} -> List{T} .

--- constructed with 'case'
  eq ajoute($x, cons($y, $tail)) = cons($y, ajoute($x, $tail)) .
  eq ajoute($x, empty) = cons($x, empty) .

endfm

red in MY-LIST :
  --- reverse(0 1 2 3 4 5 6) .
  --- ajoute('el, empty) .
  ajoute('el, cons('first, 'tail)) .

--- type List $T :: empty | cons $T (List $T)
--- case ajoute($x, cons($y, $tail)) => cons($y, ajoute($x, $tail))
--- case ajoute($x, empty) => cons($x, empty)
