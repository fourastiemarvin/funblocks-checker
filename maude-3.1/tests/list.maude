--- type definition
fmod L{X :: TRIV} is
  sort L{X} .
  op empty : -> L{X} .
  op cons : X$Elt L{X} -> L{X} .
endfm

--- generic type name
view T from TRIV to QID is
  sort Elt to Qid .
endv


fmod MY-LIST is

  protecting QID .
  including L{T} .

  sort T .
  subsort T < Qid .

  vars $x $y : T .
  var $tail : L{T} .

--- constructed with typedList
  op ajoute : T L{T} -> L{T} .

--- constructed with 'case'
  eq ajoute($x, cons($y, $tail)) = cons($y, ajoute($x, $tail)) .
  eq ajoute($x, empty) = cons($x, empty) .

endfm

red in MY-LIST :
  --- reverse(0 1 2 3 4 5 6) .
  --- ajoute('5, empty) .
  --- ajoute('el, cons('first, 'tail)) .
  cons('a, empty) .
  --- empty .

--- type List $T :: empty | cons $T (List $T)
--- case ajoute($x, cons($y, $tail)) => cons($y, ajoute($x, $tail))
--- case ajoute($x, empty) => cons($x, empty)
