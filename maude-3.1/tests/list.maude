fmod L{X :: TRIV} is
  sort L{X} .
  op empty : -> L{X} .
  op cons : X$Elt L{X} -> L{X} .
endfm

fmod MY-LIST is

  --- protecting LIST{T} .
  --- protecting NAT .
  protecting QID .

  including L{T} .
  sort T .
  subsort T < Qid .


  vars $x $y : T .
  var $tail : L{T} .

--- constructed with 'type'
  op ajoute : T L{T} -> L{T} .

--- constructed with 'case'
  eq ajoute($x, cons($y, $tail)) = cons($y, ajoute($x, $tail)) .
  eq ajoute($x, empty) = cons($x, empty) .

endfm

--- red in MY-LIST :
  --- reverse(0 1 2 3 4 5 6) .
  --- ajoute('el, empty) .
  --- ajoute('el, cons('first, 'tail)) .
  --- cons('a, empty) .
  --- empty .

--- type List $T :: empty | cons $T (List $T)
--- case ajoute($x, cons($y, $tail)) => cons($y, ajoute($x, $tail))
--- case ajoute($x, empty) => cons($x, empty)
