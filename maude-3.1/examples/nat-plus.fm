  ---- from the book All About Maude
  ---- from the Maude Manual
  ---- by the Maude team

 (fmod NAT-PLUS is
    sort Nat .
    op 0 : -> Nat .
    op s_ : Nat -> Nat .
    op _+_ : Nat Nat -> Nat [assoc comm id: 0] .
    vars N M : Nat .
    eq s N + s M = s s (N + M) .
  endfm)

  (red in META-LEVEL : upModule(NAT-PLUS) .)
---(
rewrites: 41062 in 20ms cpu (136ms real) (2053100 rewrites/second)
reduce in META-LEVEL :
  fmod 'NAT-PLUS is
  nil
  sorts 'Bool ; 'Nat .
  none
  op '0 : nil -> 'Nat [none] .
  op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm id('0.Nat)] .
  op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51)poly(1 2)special(
    id-hook('EqualitySymbol,nil)
    term-hook('equalTerm,'false.Bool)
    term-hook('notEqualTerm,'true.Bool))] .
  op '_==_ : 'Universal 'Universal -> 'Bool [prec(51)poly(1 2)special(
    id-hook('EqualitySymbol,nil)
    term-hook('equalTerm,'true.Bool)
    term-hook('notEqualTerm,'false.Bool))] .
  op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
  op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61)gather('e 'E)] .
  op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
  op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
  op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse,nil))] .
  op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2 3
    0)special(
    id-hook('BranchSymbol,nil)
    term-hook('1,'true.Bool)
    term-hook('2,'false.Bool))] .
  op 'not_ : 'Bool -> 'Bool [prec(53)] .
  op 's_ : 'Nat -> 'Nat [none] .
  op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue,nil))] .
  none
  eq '_+_['s_['N:Nat],'s_['M:Nat]]= 's_['s_['_+_['N:Nat,'M:Nat]]] [none] .
  eq '_and_['A:Bool,'A:Bool]= 'A:Bool [none] .
  eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]]= '_xor_['_and_['A:Bool,'B:Bool],
    '_and_['A:Bool,'C:Bool]] [none] .
  eq '_and_['false.Bool,'A:Bool]= 'false.Bool [none] .
  eq '_and_['true.Bool,'A:Bool]= 'A:Bool [none] .
  eq '_implies_['A:Bool,'B:Bool]= 'not_['_xor_['A:Bool,'_and_['A:Bool,
    'B:Bool]]] [none] .
  eq '_or_['A:Bool,'B:Bool]= '_xor_['_and_['A:Bool,'B:Bool],'_xor_['A:Bool,
    'B:Bool]] [none] .
  eq '_xor_['A:Bool,'A:Bool]= 'false.Bool [none] .
  eq '_xor_['false.Bool,'A:Bool]= 'A:Bool [none] .
  eq 'not_['A:Bool]= '_xor_['true.Bool,'A:Bool] [none] .
endfm
result FModule :
  fmod 'NAT-PLUS is
  nil
  sorts 'Bool ; 'Nat .
  none
  op '0 : nil -> 'Nat [none] .
  op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm id('0.Nat)] .
  op '_=/=_ : 'Universal 'Universal -> 'Bool [poly(1 2)prec(51)special(
    id-hook('EqualitySymbol,nil)
    term-hook('equalTerm,'false.Bool)
    term-hook('notEqualTerm,'true.Bool))] .
  op '_==_ : 'Universal 'Universal -> 'Bool [poly(1 2)prec(51)special(
    id-hook('EqualitySymbol,nil)
    term-hook('equalTerm,'true.Bool)
    term-hook('notEqualTerm,'false.Bool))] .
  op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
  op '_implies_ : 'Bool 'Bool -> 'Bool [gather('e 'E)prec(61)] .
  op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
  op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
  op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse,nil))] .
  op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2 3
    0)special(
    id-hook('BranchSymbol,nil)
    term-hook('1,'true.Bool)
    term-hook('2,'false.Bool))] .
  op 'not_ : 'Bool -> 'Bool [prec(53)] .
  op 's_ : 'Nat -> 'Nat [none] .
  op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue,nil))] .
  none
  eq '_+_['s_['N:Nat],'s_['M:Nat]]= 's_['s_['_+_['N:Nat,'M:Nat]]] [none] .
  eq '_and_['A:Bool,'A:Bool]= 'A:Bool [none] .
  eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]]= '_xor_['_and_['A:Bool,'B:Bool],
    '_and_['A:Bool,'C:Bool]] [none] .
  eq '_and_['false.Bool,'A:Bool]= 'false.Bool [none] .
  eq '_and_['true.Bool,'A:Bool]= 'A:Bool [none] .
  eq '_implies_['A:Bool,'B:Bool]= 'not_['_xor_['A:Bool,'_and_['A:Bool,
    'B:Bool]]] [none] .
  eq '_or_['A:Bool,'B:Bool]= '_xor_['_and_['A:Bool,'B:Bool],'_xor_['A:Bool,
    'B:Bool]] [none] .
  eq '_xor_['A:Bool,'A:Bool]= 'false.Bool [none] .
  eq '_xor_['false.Bool,'A:Bool]= 'A:Bool [none] .
  eq 'not_['A:Bool]= '_xor_['true.Bool,'A:Bool] [none] .
endfm
---)

  (red in META-LEVEL :
            metaReduce(upModule(NAT-PLUS), '_+_['0.Nat, 's_['0.Nat]]) .)
---(
rewrites: 41623 in 60ms cpu (139ms real) (693716 rewrites/second)
reduce in META-LEVEL :
  metaReduce(fmod 'NAT-PLUS is
  nil
  sorts 'Bool ; 'Nat .
  none
  op '0 : nil -> 'Nat [none] .
  op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm id('0.Nat)] .
  op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51)poly(1 2)special(
    id-hook('EqualitySymbol,nil)
    term-hook('equalTerm,'false.Bool)
    term-hook('notEqualTerm,'true.Bool))] .
  op '_==_ : 'Universal 'Universal -> 'Bool [prec(51)poly(1 2)special(
    id-hook('EqualitySymbol,nil)
    term-hook('equalTerm,'true.Bool)
    term-hook('notEqualTerm,'false.Bool))] .
  op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
  op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61)gather('e 'E)] .
  op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
  op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
  op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse,nil))] .
  op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2 3
    0)special(
    id-hook('BranchSymbol,nil)
    term-hook('1,'true.Bool)
    term-hook('2,'false.Bool))] .
  op 'not_ : 'Bool -> 'Bool [prec(53)] .
  op 's_ : 'Nat -> 'Nat [none] .
  op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue,nil))] .
  none
  eq '_+_['s_['N:Nat],'s_['M:Nat]]= 's_['s_['_+_['N:Nat,'M:Nat]]] [none] .
  eq '_and_['A:Bool,'A:Bool]= 'A:Bool [none] .
  eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]]= '_xor_['_and_['A:Bool,'B:Bool],
    '_and_['A:Bool,'C:Bool]] [none] .
  eq '_and_['false.Bool,'A:Bool]= 'false.Bool [none] .
  eq '_and_['true.Bool,'A:Bool]= 'A:Bool [none] .
  eq '_implies_['A:Bool,'B:Bool]= 'not_['_xor_['A:Bool,'_and_['A:Bool,
    'B:Bool]]] [none] .
  eq '_or_['A:Bool,'B:Bool]= '_xor_['_and_['A:Bool,'B:Bool],'_xor_['A:Bool,
    'B:Bool]] [none] .
  eq '_xor_['A:Bool,'A:Bool]= 'false.Bool [none] .
  eq '_xor_['false.Bool,'A:Bool]= 'A:Bool [none] .
  eq 'not_['A:Bool]= '_xor_['true.Bool,'A:Bool] [none] .
endfm,'_+_['0.Nat,'s_['0.Nat]])
result ResultPair :
  {'s_['0.Nat],'Nat}
---)

  (red in META-LEVEL :
            metaReduce(upModule(NAT-PLUS), upTerm(NAT-PLUS, 0 + s 0)) .)
---(
rewrites: 41745 in 20ms cpu (138ms real) (2087250 rewrites/second)
reduce in META-LEVEL :
  metaReduce(fmod 'NAT-PLUS is
  nil
  sorts 'Bool ; 'Nat .
  none
  op '0 : nil -> 'Nat [none] .
  op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm id('0.Nat)] .
  op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51)poly(1 2)special(
    id-hook('EqualitySymbol,nil)
    term-hook('equalTerm,'false.Bool)
    term-hook('notEqualTerm,'true.Bool))] .
  op '_==_ : 'Universal 'Universal -> 'Bool [prec(51)poly(1 2)special(
    id-hook('EqualitySymbol,nil)
    term-hook('equalTerm,'true.Bool)
    term-hook('notEqualTerm,'false.Bool))] .
  op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
  op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61)gather('e 'E)] .
  op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
  op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
  op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse,nil))] .
  op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2 3
    0)special(
    id-hook('BranchSymbol,nil)
    term-hook('1,'true.Bool)
    term-hook('2,'false.Bool))] .
  op 'not_ : 'Bool -> 'Bool [prec(53)] .
  op 's_ : 'Nat -> 'Nat [none] .
  op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue,nil))] .
  none
  eq '_+_['s_['N:Nat],'s_['M:Nat]]= 's_['s_['_+_['N:Nat,'M:Nat]]] [none] .
  eq '_and_['A:Bool,'A:Bool]= 'A:Bool [none] .
  eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]]= '_xor_['_and_['A:Bool,'B:Bool],
    '_and_['A:Bool,'C:Bool]] [none] .
  eq '_and_['false.Bool,'A:Bool]= 'false.Bool [none] .
  eq '_and_['true.Bool,'A:Bool]= 'A:Bool [none] .
  eq '_implies_['A:Bool,'B:Bool]= 'not_['_xor_['A:Bool,'_and_['A:Bool,
    'B:Bool]]] [none] .
  eq '_or_['A:Bool,'B:Bool]= '_xor_['_and_['A:Bool,'B:Bool],'_xor_['A:Bool,
    'B:Bool]] [none] .
  eq '_xor_['A:Bool,'A:Bool]= 'false.Bool [none] .
  eq '_xor_['false.Bool,'A:Bool]= 'A:Bool [none] .
  eq 'not_['A:Bool]= '_xor_['true.Bool,'A:Bool] [none] .
endfm,'_+_['0.Nat,'s_['0.Nat]])
result ResultPair :
  {'s_['0.Nat],'Nat}
---)

  (red in META-LEVEL : upTerm(NAT-PLUS, s 0) .)
---(
rewrites: 41279 in 120ms cpu (132ms real) (343991 rewrites/second)
reduce in META-LEVEL :
  's_['0.Nat]
result GroundTerm :
  's_['0.Nat]
---)

  (down NAT-PLUS :
            red in META-LEVEL :
              getTerm(
                metaReduce(upModule(NAT-PLUS),
                           upTerm(NAT-PLUS, 0 + s 0))) .)
---(
rewrites: 41638 in 80ms cpu (134ms real) (520475 rewrites/second)
result Nat :
  s 0
---)

  (red in META-LEVEL : 
              getTerm(
                metaReduce(upModule(META-LEVEL),
                  upTerm(META-LEVEL,
                    getTerm(
                      metaReduce(upModule(NAT-PLUS),
                                 upTerm(NAT-PLUS, 0 + s 0)))))) .)
---(
  result GroundTerm :
    '_`[_`][''s_.Sort, ''0.Nat.Constant]
---)

  (down NAT-PLUS :
            down META-LEVEL :
              red in META-LEVEL : getTerm(
                    metaReduce(upModule(META-LEVEL),
                      upTerm(META-LEVEL,
                        getTerm(
                          metaReduce(upModule(NAT-PLUS),
                                     upTerm(NAT-PLUS, 0 + s 0)))))) .)
---(
  result Nat :
    s 0
---)

  (down NAT-PLUS :
            red in META-LEVEL :
              downTerm(
                getTerm(
                  metaReduce(upModule(META-LEVEL),
                    upTerm(META-LEVEL,
                      getTerm(
                        metaReduce(upModule(NAT-PLUS),
                                   upTerm(NAT-PLUS, 0 + s 0)))))),
                'T:Term) .)
---(
  result Nat :
    s 0
---)