  ---- from the book All About Maude
  ---- from the Maude Manual
  ---- by the Maude team + Santiago Escobar

 (mod ID-UNIFICATION-EXAMPLE is
    sorts MSet Elem .
    subsorts Elem < MSet .
    op __ : MSet MSet -> MSet [assoc comm id: e] .
    ops a b c d e : -> Elem .
  endm)

 (id-unify in ID-UNIFICATION-EXAMPLE : a a =? a a e .)
---(
rewrites: 14053 in 43ms cpu (46ms real) (320456 rewrites/second)
id-unify in ID-UNIFICATION-EXAMPLE : a a =? a a e .

Solution 1
empty substitution

No more solutions.
---)

(id-unify in ID-UNIFICATION-EXAMPLE : X:MSet =? a a e .)
---(
rewrites: 6247 in 56ms cpu (62ms real) (110654 rewrites/second)
id-unify in ID-UNIFICATION-EXAMPLE : X:MSet =? a a e .

Solution 1
X:MSet --> a a

No more solutions.
---)

(id-unify in ID-UNIFICATION-EXAMPLE : a X:MSet =? a a Y:MSet .)
---(
rewrites: 9060 in 70ms cpu (113ms real) (129067 rewrites/second)
id-unify in ID-UNIFICATION-EXAMPLE : a X:MSet =? a a Y:MSet .

Solution 1
X:MSet --> a Y:MSet

Solution 2
X:MSet --> a ; Y:MSet --> e

No more solutions.
---)

(red in FM-META-NARROWING-SEARCH :
            metaACUUnify(upModule(ID-UNIFICATION-EXAMPLE),
              '__['a.Elem, 'X:MSet],
              '__['__['a.Elem, 'a.Elem], 'Y:MSet]) .)
---(
rewrites: 87821 in 1174ms cpu (1212ms real) (74776 rewrites/second)
reduce in FM-META-NARROWING-SEARCH :
  metaACUUnify(mod 'ID-UNIFICATION-EXAMPLE is
  nil
  sorts 'Bool ; 'Elem ; 'MSet .
  subsort 'Elem < 'MSet .
  op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51)poly(1 2)special(
    id-hook('EqualitySymbol,nil)
    term-hook('equalTerm,'false.Bool)
    term-hook('notEqualTerm,'true.Bool))] .
  op '_==_ : 'Universal 'Universal -> 'Bool [prec(51)poly(1 2)special(
    id-hook('EqualitySymbol,nil)
    term-hook('equalTerm,'true.Bool)
    term-hook('notEqualTerm,'false.Bool))] .
  op '__ : 'MSet 'MSet -> 'MSet [assoc comm id('e.Elem)] .
  op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
  op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61)gather('e 'E)] .
  op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
  op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
  op 'a : nil -> 'Elem [none] .
  op 'b : nil -> 'Elem [none] .
  op 'c : nil -> 'Elem [none] .
  op 'd : nil -> 'Elem [none] .
  op 'e : nil -> 'Elem [none] .
  op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse,nil))] .
  op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2 3 0)special(
    id-hook('BranchSymbol,nil)
    term-hook('1,'true.Bool)
    term-hook('2,'false.Bool))] .
  op 'not_ : 'Bool -> 'Bool [prec(53)] .
  op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue,nil))] .
  none
  eq '_and_['A:Bool,'A:Bool]= 'A:Bool [none] .
  eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]]= '_xor_['_and_['A:Bool,'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
  eq '_and_['false.Bool,'A:Bool]= 'false.Bool [none] .
  eq '_and_['true.Bool,'A:Bool]= 'A:Bool [none] .
  eq '_implies_['A:Bool,'B:Bool]= 'not_['_xor_['A:Bool,'_and_['A:Bool,'B:Bool]]] [none] .
  eq '_or_['A:Bool,'B:Bool]= '_xor_['_and_['A:Bool,'B:Bool],'_xor_['A:Bool,'B:Bool]] [none] .
  eq '_xor_['A:Bool,'A:Bool]= 'false.Bool [none] .
  eq '_xor_['false.Bool,'A:Bool]= 'A:Bool [none] .
  eq 'not_['A:Bool]= '_xor_['true.Bool,'A:Bool] [none] .
  none
endm,'__['a.Elem,'X:MSet],'__['__['a.Elem,'a.Elem],'Y:MSet])
result NeSubstitutionSet :
  (
    'X:MSet <- 'a.Elem ;
    'Y:MSet <- 'e.Elem)
|(
    'X:MSet <- '__['a.Elem,'Y:MSet])
---)
